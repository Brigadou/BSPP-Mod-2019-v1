//******************************************************************************************
//
//		Script Renfort Toutes unités
//		Inspiré de Hoppah
//		Edité par Superjajaman75 pour BSPP Mod
//
//******************************************************************************************

// Déclarations de véhicules de Pompiers
const char PROTO_VLROGC[] 				= "mod:Prototypes/Vehicles/Fire Department/VLROGC.e4p";
const char PROTO_VLRCGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VLRCGI.e4p";
const char PROTO_VLROPC[] 				= "mod:Prototypes/Vehicles/Fire Department/VLROPC.e4p";
const char PROTO_VPC[] 					= "mod:Prototypes/Vehicles/Fire Department/VPC.e4p";

const char PROTO_CA[] 					= "mod:Prototypes/Vehicles/Fire Department/CA.e4p";
const char PROTO_FPTMidlum[]			= "mod:Prototypes/Vehicles/Fire Department/FPTmidlum.e4p";
const char PROTO_FPTAtego[]				= "mod:Prototypes/Vehicles/Fire Department/FPTatego.e4p";
const char PROTO_FM[]					= "mod:Prototypes/Vehicles/Fire Department/FM.e4p";
const char PROTO_FA[]					= "mod:Prototypes/Vehicles/Fire Department/FA.e4p";
const char PROTO_PST[] 					= "mod:Prototypes/Vehicles/Fire Department/PST.e4p";
const char PROTO_FPTL[] 				= "mod:Prototypes/Vehicles/Fire Department/FPTL.e4p";
const char PROTO_PSE2[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE2.e4p";
const char PROTO_PSE3[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE3.e4p";
const char PROTO_PSE4[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE4.e4p";
const char PROTO_PSE5[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE5.e4p";
const char PROTO_CCR[]					= "mod:Prototypes/Vehicles/Fire Department/CCR.e4p";
const char PROTO_VIVP[]					= "mod:Prototypes/Vehicles/Fire Department/VIVP.e4p";

const char PROTO_BEAA[] 				= "mod:Prototypes/Vehicles/Fire Department/BEAA.e4p";
const char PROTO_EPAAtego[] 			= "mod:Prototypes/Vehicles/Fire Department/EPA_atego.e4p";
const char PROTO_EPAIveco[]				= "mod:Prototypes/Vehicles/Fire Department/EPA_iveco.e4p";

const char PROTO_VPS[] 					= "mod:Prototypes/Vehicles/Fire Department/VPS.e4p";
const char PROTO_VSTI[] 				= "mod:Prototypes/Vehicles/Fire Department/VSTI.e4p";
const char PROTO_VPB[] 					= "mod:Prototypes/Vehicles/Fire Department/VPB.e4p";
const char PROTO_VE2I[] 				= "mod:Prototypes/Vehicles/Fire Department/VE2I.e4p";
const char PROTO_ELI[] 					= "mod:Prototypes/Vehicles/Fire Department/ELI.e4p";
const char PROTO_VIMP[] 				= "mod:Prototypes/Vehicles/Fire Department/VIMP.e4p";
const char PROTO_VAG[] 					= "mod:Prototypes/Vehicles/Fire Department/VAG.e4p";
const char PROTO_PEV[]					= "mod:Prototypes/Vehicles/Fire Department/PEV.e4p";
const char PROTO_PRM[]					= "mod:Prototypes/Vehicles/Fire Department/PRM.e4p";
const char PROTO_CRAC[] 				= "mod:Prototypes/Vehicles/Fire Department/CRAC.e4p";
const char PROTO_CESD[]					= "mod:Prototypes/Vehicles/Fire Department/CESD.e4p";
const char PROTO_CD[]					= "mod:Prototypes/Vehicles/Fire Department/CD.e4p";
const char PROTO_VELD[]					= "mod:Prototypes/Vehicles/Fire Department/VELD.e4p";
const char PROTO_CTGI[]					= "mod:Prototypes/Vehicles/Fire Department/CTGI.e4p";

const char PROTO_VIGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VIGI.e4p";
const char PROTO_VID[] 					= "mod:Prototypes/Vehicles/Fire Department/VID.e4p";
const char PROTO_VID2[] 				= "mod:Prototypes/Vehicles/Fire Department/VID2.e4p";
const char PROTO_VID3[] 				= "mod:Prototypes/Vehicles/Fire Department/VID3.e4p";

const char PROTO_SPVL308[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVL308.e4p";
const char PROTO_SPVLUP[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVLup.e4p";
const char PROTO_SPVLgolf[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLgolf.e4p";
const char PROTO_SPVLclio3[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio3.e4p";
const char PROTO_SPVLclio4[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio4.e4p";
const char PROTO_SPVLkangoo[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLkangoo.e4p";
const char PROTO_SPVLmegane[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLmegane.e4p";

const char PROTO_VDIP[] 				= "mod:Prototypes/Vehicles/Fire Department/VDIP.e4p";
const char PROTO_VANRBC[] 				= "mod:Prototypes/Vehicles/Fire Department/VANRBC.e4p";
const char PROTO_CICCIB[] 				= "mod:Prototypes/Vehicles/Fire Department/CICCIB.e4p";
const char PROTO_CICCRR[]				= "mod:Prototypes/Vehicles/Fire Department/CICCRR.e4p";

const char PROTO_SIS[] 					= "mod:Prototypes/Vehicles/Fire Department/SIS.e4p";
const char PROTO_SIS2[] 				= "mod:Prototypes/Vehicles/Fire Department/SIS2.e4p";
const char PROTO_CSP[] 					= "mod:Prototypes/Vehicles/Fire Department/CSP.e4p";
const char PROTO_SPTT[] 				= "mod:Prototypes/Vehicles/Fire Department/SPTT.e4p";

const char PROTO_VTP[] 					= "mod:Prototypes/Vehicles/Fire Department/VTP.e4p";



// Déclarations de véhicules du ambulances
const char PROTO_PCMSAMU[] 				= "mod:Prototypes/Vehicles/Ambulance/SAMU_PCM_master.e4p";

const char PROTO_UMHMASTER[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_UMH_master.e4p";
const char PROTO_UMHSPRINTER[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_UMH_sprinter.e4p";
const char PROTO_VLMKANGOO[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_VLM_kangoo.e4p";
const char PROTO_VLMVITO[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_VLM_vito.e4p";

const char PROTO_CMO[] 					= "mod:Prototypes/Vehicles/Ambulance/CMO.e4p";
const char PROTO_VPCM[] 				= "mod:Prototypes/Vehicles/Ambulance/VPCM.e4p";
const char PROTO_VLRDSM[] 				= "mod:Prototypes/Vehicles/Ambulance/VLRDSM.e4p";

const char PROTO_VSAVB[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVb.e4p";
const char PROTO_VSAVR[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVr.e4p";
const char PROTO_PSR[] 					= "mod:Prototypes/Vehicles/Ambulance/PSR.e4p";
const char PROTO_ARIveco[] 				= "mod:Prototypes/Vehicles/Ambulance/ARiveco.e4p";
const char PROTO_ARMaster[] 			= "mod:Prototypes/Vehicles/Ambulance/ARmaster.e4p";
const char PROTO_ARDucato[] 			= "mod:Prototypes/Vehicles/Ambulance/ARducato.e4p";
const char PROTO_VES[] 					= "mod:Prototypes/Vehicles/Ambulance/VES.e4p";
const char PROTO_VAS[] 					= "mod:Prototypes/Vehicles/Ambulance/VAS.e4p";
const char PROTO_VRCP[] 				= "mod:Prototypes/Vehicles/Ambulance/VRCP.e4p";
const char PROTO_VRM[] 					= "mod:Prototypes/Vehicles/Ambulance/VRM.e4p";
const char PROTO_VRSD[] 				= "mod:Prototypes/Vehicles/Ambulance/VRSD.e4p";

const char PROTO_PFG[] 					= "mod:Prototypes/Vehicles/Ambulance/PFG.e4p";

const char PROTO_VLRVETO[] 				= "mod:Prototypes/Vehicles/Ambulance/VLRVETO.e4p";
const char PROTO_VSC[] 					= "mod:Prototypes/Vehicles/Ambulance/VSC.e4p";
const char PROTO_VEC[] 					= "mod:Prototypes/Vehicles/Ambulance/VEC.e4p";

const char PROTO_ADPC308[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_308.e4p";
const char PROTO_ADPC_Master[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_cube.e4p";
const char PROTO_ADPC_Master_2[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_2.e4p";
const char PROTO_ADPC_Master_3[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_3.e4p";

// Déclarations de véhicules des Services Techniques
const char PROTO_DEP[] 					= "mod:Prototypes/Vehicles/TEC/depanneuse.e4p";
const char PROTO_ERDFkangoo[] 			= "mod:Prototypes/Vehicles/TEC/erdf_kangoo.e4p";
const char PROTO_GRDFtrafic[] 			= "mod:Prototypes/Vehicles/TEC/grdf_trafic.e4p";
const char PROTO_GRUE[] 				= "mod:Prototypes/Vehicles/TEC/fgr.e4p";

const char UNNAMED[] 					= "Unnamed";



class ClassSpawn: CommandScript
{

	void Create(GameObject *Caller, char PROTO[], char NAME[], int NbMaxPassager, int NbMaxTransport)
	{
		GameObjectList vehList(NAME);
		GameObject veh;
		
		if (vehList.GetNumObjects() == 1)
		{
			veh = vehList.GetObject(0);			
			Vector vehPos = veh.GetPosition();
			float r[9];
			veh.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

			
			Vehicle newVeh = Game::CreateVehicle(PROTO, UNNAMED);
			
			newVeh.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			newVeh.SetPosition(vehPos);
			newVeh.UpdatePlacement();
			newVeh.SetMaxPassengers(NbMaxPassager);
			newVeh.SetMaxTransports(NbMaxTransport);			
			newVeh.SetPlayerMP(Caller->GetPlayerMP());
			newVeh.EnableBlueLights(false);
			newVeh.EnableHeadLights(false);
		} else {
			System::Log("[INIT] veh non trouve");
		}
		
		
	}
};

//TODO init CMO
object Init_CSLAND : CommandScript
{
	Init_CSLAND()
	{
		SetIcon("CSLAND");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	bool CheckPossible(GameObject *Caller) { 
		if (Game::IsCampaign() || Game::IsMission() || Game::IsFreeplay())
			return false; 
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		ClassSpawn::Create(Caller, PROTO_ADPC_Master,  "MasterPC", 3, 1); //PROTEC
		ClassSpawn::Create(Caller, PROTO_ARIveco, "AR_Iveco", 3, 1);
		ClassSpawn::Create(Caller, PROTO_ARMaster, "AR_Master", 3, 1);
		ClassSpawn::Create(Caller, PROTO_FPTMidlum, "FPT_Midlum", 6, 0);
		ClassSpawn::Create(Caller, PROTO_CA, "CA", 2, 0);
		ClassSpawn::Create(Caller, PROTO_CD, "CD", 2, 0);
		ClassSpawn::Create(Caller, PROTO_CESD, "CESD", 4, 0);
		//ClassSpawn::Create(Caller, PROTO_CMO,  "CMO", 4, 0);
		ClassSpawn::Create(Caller, PROTO_EPAIveco, "EPAN_Iveco", 3, 0);
		ClassSpawn::Create(Caller, PROTO_PEV,  "PEV", 3, 0);
		ClassSpawn::Create(Caller, PROTO_PSE3,  "PS3", 6, 0);
		ClassSpawn::Create(Caller, PROTO_PSE5,  "PS5", 6, 0);
		ClassSpawn::Create(Caller, PROTO_SPVL308,  "SPVL_308", 3, 0);
		ClassSpawn::Create(Caller, PROTO_SPVLkangoo,  "SPVL_Kangoo", 2, 0);
		ClassSpawn::Create(Caller, PROTO_VSAVB,  "VSAV_B_1", 3, 1);
		ClassSpawn::Create(Caller, PROTO_VSAVB,  "VSAV_B_2", 3, 1);
		ClassSpawn::Create(Caller, PROTO_VSAVR,  "VSAV_R_1", 3, 1);
		ClassSpawn::Create(Caller, PROTO_VIGI,  "VIGI", 3, 0);
		ClassSpawn::Create(Caller, PROTO_VPS,  "VPS", 2, 0);
		ClassSpawn::Create(Caller, PROTO_VIMP,  "VIMP", 5, 0);
		ClassSpawn::Create(Caller, PROTO_VAG,  "VAG", 5, 0);
		ClassSpawn::Create(Caller, PROTO_VID,  "VID", 2, 0);
		ClassSpawn::Create(Caller, PROTO_VID2,  "VID2", 2, 0);
		ClassSpawn::Create(Caller, PROTO_VPC,  "VPC", 2, 0);

		if (Game::IsFreeplay())
		{
			GameObjectList vehList("VPCM");
			
			if (vehList.GetNumObjects() == 1)
			{
				GameObject veh = vehList.GetObject(0);			
				Vector vehPos = veh.GetPosition();
				float r[9];
				veh.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

				Vehicle m = Game::CreateVehicle(PROTO_VPCM, UNNAMED);
				m.EnableBlueLights(false);
				m.EnableHeadLights(false);
				m.SetPosition(vehPos);
				m.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
				m.UpdatePlacement();
				m.SetMaxPassengers(6);
				m.PushActionWait(ACTION_NEWLIST, 1.0f);
				m.AssignCommand("MoveTo");
				Person p1;
				Person p2;
				Person p3;
				Person p4;
				Person p5;
				p1 = Game::CreatePerson("mod:Prototypes/Persons/Fire Department/COScta.e4p", UNNAMED);
				p2 = Game::CreatePerson("mod:Prototypes/Persons/Fire Department/COSsp.e4p", UNNAMED);
				p3 = Game::CreatePerson("mod:Prototypes/Persons/Ambulance/COSsamu.e4p", UNNAMED);
				p4 = Game::CreatePerson("mod:Prototypes/Persons/Police/COSpn.e4p", UNNAMED);
				p5 = Game::CreatePerson("mod:Prototypes/Persons/TEC/COSt.e4p", UNNAMED);
				p1.SetPlayerMP(Caller->GetPlayerMP());
				p2.SetPlayerMP(Caller->GetPlayerMP());
				p3.SetPlayerMP(Caller->GetPlayerMP());
				p4.SetPlayerMP(Caller->GetPlayerMP());
				p5.SetPlayerMP(Caller->GetPlayerMP());
				m.AddPassenger(&p1);
				m.AddPassenger(&p2);
				m.AddPassenger(&p3);
				m.AddPassenger(&p4);
				m.AddPassenger(&p5);
				Game::AddToGroup(&p1, 0);
				Game::AddToGroup(&p2, 1);
				Game::AddToGroup(&p3, 2);
				Game::AddToGroup(&p4, 3);
				Game::AddToGroup(&p5, 4);
			}
		}
	}
};

object Init_CSBITCHE : CommandScript
{
	Init_CSBITCHE()
	{
		SetIcon("CSBITCHE");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	bool CheckPossible(GameObject *Caller) { 
		if (Game::IsCampaign() || Game::IsMission() || Game::IsFreeplay())
			return false; 
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		ClassSpawn::Create(Caller, PROTO_VSAVR,  "VSAV_R_2", 3, 1);
		ClassSpawn::Create(Caller, PROTO_PSE5,  "PS5_2", 6, 0);
		ClassSpawn::Create(Caller, PROTO_PSE4,  "PS4", 6, 0);
		ClassSpawn::Create(Caller, PROTO_EPAAtego,  "EPAN_Atego", 3, 0);
		ClassSpawn::Create(Caller, PROTO_SPVLclio3,  "SPVL_Clio3", 3, 0);
		ClassSpawn::Create(Caller, PROTO_VID,  "VID_2", 2, 0);
	}
};

object Init_CSGRENELLE : CommandScript
{
	Init_CSGRENELLE()
	{
		SetIcon("CSGRENELLE");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	bool CheckPossible(GameObject *Caller) { 
		if (Game::IsCampaign() || Game::IsMission() || Game::IsFreeplay())
			return false; 
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		ClassSpawn::Create(Caller, PROTO_VSAVB, "VSAV_B_3", 3, 1);
		ClassSpawn::Create(Caller, PROTO_VSAVR, "VSAV_R_3", 3, 1);
		ClassSpawn::Create(Caller, PROTO_PSE4, "PS4_2", 6, 0);
		ClassSpawn::Create(Caller, PROTO_CCR, "CCR", 6, 0);
		ClassSpawn::Create(Caller, PROTO_FPTAtego, "FPT_Atego", 6, 0);
		ClassSpawn::Create(Caller, PROTO_EPAAtego, "EPAN_Atego_2", 3, 0);
		ClassSpawn::Create(Caller, PROTO_SPVLUP, "SPVL_UP", 3, 0);
		ClassSpawn::Create(Caller, PROTO_VID, "VID_3", 2, 0);
	}
};


object Init_SAMU : CommandScript
{
	Init_SAMU()
	{
		SetIcon("samu");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	bool CheckPossible(GameObject *Caller) { 
		if (Game::IsCampaign() || Game::IsMission() || Game::IsFreeplay())
			return false; 
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		/*ClassSpawn::Create(Caller, PROTO_VLMVITO, "VLM_vito", 2, 0);*/
		ClassSpawn::Create(Caller, PROTO_UMHMASTER, "UMH_master", 3, 1);
		ClassSpawn::Create(Caller, PROTO_UMHSPRINTER, "UMH_sprinter", 3, 1);
		ClassSpawn::Create(Caller, PROTO_VLMKANGOO, "VLM_kangoo", 2, 0);
	}
};

object Init_TEC : CommandScript
{
	Init_TEC()
	{
		SetIcon("tec");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return true;}
	bool CheckPossible(GameObject *Caller) { 
		if (Game::IsCampaign() || Game::IsMission() || Game::IsFreeplay())
			return false; 
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		ClassSpawn::Create(Caller, PROTO_GRDFtrafic, "GRDF", 1, 0);
		ClassSpawn::Create(Caller, PROTO_ERDFkangoo, "ERDF_1", 1, 0);
		ClassSpawn::Create(Caller, PROTO_ERDFkangoo, "ERDF_2", 1, 0);
		ClassSpawn::Create(Caller, PROTO_GRUE, "TEC1_4", 1, 0);
		ClassSpawn::Create(Caller, PROTO_DEP, "TEC1_5", 1, 0);
		ClassSpawn::Create(Caller, PROTO_DEP, "TEC1_6", 1, 0);
		ClassSpawn::Create(Caller, PROTO_DEP, "TEC1_7", 1, 0);
	}
};

