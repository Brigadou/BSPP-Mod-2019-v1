//**************************************************************************************************
// #Version 2.0#								                                                                     		****
// C++ Programmation								                                                                    	****
// 		Inclus: tous les deux-tons						                                                         	****
//											                                                                  	****
//	1.0| Deux_Tons									                                                         	****
//	1.1| DUMMYUpdatePos								                                                            	****
//	1.2| DUMMYDisableSiren							                                          		****
//	1.3| DUMMYFindPath								                                                       	****
//	1.4| DUMMYHasSiren								                                                      	****
//												                                                                ****
//                 childID 1 for disabling bluelights.							                                         	****
//											                                                                    	****
//**************************************************************************************************

//  (DUMMY = Mannequin)
// 
const char IMG[] = "deux_tons_on";

const char EACTION_FINDPATH[] = "EActionFindPath";

const char DUMMY_HASSIREN[] = "DUMMYHasSiren";
const char DUMMY_UPDATEPOS[] = "DUMMYUpdatePos";
const char DUMMY_FINDPATH[] = "DUMMYFindPath";
const char CMD_MOVETO[] = "MoveTo";
const char NAME_DUMMYOBJECT[] = "HelpingObjekt_Roger";

// Déclarations de véhicules de Pompiers
const char PROTO_CA[] 					= "mod:Prototypes/Vehicles/Fire Department/CA.e4p";
const char PROTO_CCR[]					= "mod:Prototypes/Vehicles/Fire Department/CCR.e4p";
const char PROTO_CD[]					= "mod:Prototypes/Vehicles/Fire Department/CD.e4p";
const char PROTO_CESD[]					= "mod:Prototypes/Vehicles/Fire Department/CESD.e4p";
const char PROTO_CIC_CRR[]				= "mod:Prototypes/Vehicles/Fire Department/CIC_CRR.e4p";
const char PROTO_CRAC[] 				= "mod:Prototypes/Vehicles/Fire Department/CRAC.e4p";
const char PROTO_CSP[] 					= "mod:Prototypes/Vehicles/Fire Department/CSP.e4p";
const char PROTO_EPAAtego[] 			= "mod:Prototypes/Vehicles/Fire Department/EPA_atego.e4p";
const char PROTO_EPAIveco[]				= "mod:Prototypes/Vehicles/Fire Department/EPA_iveco.e4p";
const char PROTO_FPTAtego[]				= "mod:Prototypes/Vehicles/Fire Department/FPTatego.e4p";
const char PROTO_FPTMidlum[]			= "mod:Prototypes/Vehicles/Fire Department/FPTmidlum.e4p";
const char PROTO_VIMP[]					= "mod:Prototypes/Vehicles/Fire Department/VIMP.e4p";
const char PROTO_PEV[]					= "mod:Prototypes/Vehicles/Fire Department/PEV.e4p";
const char PROTO_PSE4[] 					= "mod:Prototypes/Vehicles/Fire Department/PSE4.e4p";
const char PROTO_PSE5[] 					= "mod:Prototypes/Vehicles/Fire Department/PSE5.e4p";
const char PROTO_PST[] 					= "mod:Prototypes/Vehicles/Fire Department/PST.e4p";
const char PROTO_SIS[] 					= "mod:Prototypes/Vehicles/Fire Department/SIS.e4p";
const char PROTO_SPTT[] 				= "mod:Prototypes/Vehicles/Fire Department/SPTT.e4p";
const char PROTO_SPVL2clio[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVL2clio.e4p";
const char PROTO_SPVLclio[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio.e4p";
const char PROTO_SPVLkangoo[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLkangoo.e4p";
const char PROTO_VAG[] 					= "mod:Prototypes/Vehicles/Fire Department/VAG.e4p";
const char PROTO_VIDkangoo[] 			= "mod:Prototypes/Vehicles/Fire Department/VIDkangoo.e4p";
const char PROTO_VIGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VIGI.e4p";
const char PROTO_VPS[] 					= "mod:Prototypes/Vehicles/Fire Department/VPS.e4p";
const char PROTO_VSC[] 					= "mod:Prototypes/Vehicles/Fire Department/VSC.e4p";
const char PROTO_VPB[] 				= "mod:Prototypes/Vehicles/Fire Department/VPB.e4p";
const char PROTO_VTP[] 					= "mod:Prototypes/Vehicles/Fire Department/VTP.e4p";


// Déclarations de véhicules du ambulances
const char PROTO_VSAV[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVb.e4p";
const char PROTO_VSAV2[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVr.e4p";
const char PROTO_PSR[] 					= "mod:Prototypes/Vehicles/Ambulance/PSR.e4p";
const char PROTO_ARIveco[] 				= "mod:Prototypes/Vehicles/Ambulance/ARiveco.e4p";
const char PROTO_ARMaster[] 			= "mod:Prototypes/Vehicles/Ambulance/ARmaster.e4p";
const char PROTO_MasterPC[] 			= "mod:Prototypes/Vehicles/Ambulance/MasterPC.e4p";
const char PROTO_PCDSM[] 				= "mod:Prototypes/Vehicles/Ambulance/PCDSM.e4p";
const char PROTO_PFG[] 					= "mod:Prototypes/Vehicles/Ambulance/PFG.e4p";
const char PROTO_VES[] 					= "mod:Prototypes/Vehicles/Ambulance/VES.e4p";

// Déclarations de véhicules de la police
const char PROTO_207SW[]				= "mod:Prototypes/Vehicles/Police/207sw.e4p";
const char PROTO_308PN[]				= "mod:Prototypes/Vehicles/Police/308_pn.e4p";
const char PROTO_308GIGN[]				= "mod:Prototypes/Vehicles/Police/308gign.e4p";
const char PROTO_BERLINGOPN[]			= "mod:Prototypes/Vehicles/Police/berlingo_pn.e4p";
const char PROTO_C4BAN[]				= "mod:Prototypes/Vehicles/Police/c4_ban.e4p";
const char PROTO_C4GN[]					= "mod:Prototypes/Vehicles/Police/c4_gend.e4p";
const char PROTO_C8GIGN[]				= "mod:Prototypes/Vehicles/Police/c8_gign.e4p";
const char PROTO_ESPACEGIGN[]			= "mod:Prototypes/Vehicles/Police/espace_gign.e4p";
const char PROTO_EXPERTGIGN[]			= "mod:Prototypes/Vehicles/Police/expert_gign.e4p";
const char PROTO_GIGN[]					= "mod:Prototypes/Vehicles/Police/gign.e4p";
const char PROTO_GIGN2[]				= "mod:Prototypes/Vehicles/Police/gign2.e4p";
const char PROTO_MASTERCRS[]			= "mod:Prototypes/Vehicles/Police/master_crs.e4p";
const char PROTO_DEMINAGE[]				= "mod:Prototypes/Vehicles/Police/master_deminage.e4p";
const char PROTO_MASTERGIGN[]			= "mod:Prototypes/Vehicles/Police/master_gign.e4p";
const char PROTO_MASTERPN[]				= "mod:Prototypes/Vehicles/Police/master_pn.e4p";
const char PROTO_MASTERPN2[]			= "mod:Prototypes/Vehicles/Police/master_pn2.e4p";
const char PROTO_MASTERPN3[]			= "mod:Prototypes/Vehicles/Police/master_pn3.e4p";
const char PROTO_MASTERPN4[]			= "mod:Prototypes/Vehicles/Police/master_pn4.e4p";
const char PROTO_MASTERVTD[]			= "mod:Prototypes/Vehicles/Police/master_vtd.e4p";
const char PROTO_MONDEO75N[]			= "mod:Prototypes/Vehicles/Police/mondeo_75n.e4p";
const char PROTO_SCENIC[]				= "mod:Prototypes/Vehicles/Police/scenic_pn.e4p";
const char PROTO_TRANSITCRS[]			= "mod:Prototypes/Vehicles/Police/TRANSIT_crs.e4p";
const char PROTO_GETAWAY[]				= "mod:Prototypes/Vehicles/Police/getawaycar.e4p";
const char PROTO_MOTOGN[]				= "mod:Prototypes/Vehicles/Police/BMW1200RT.e4p";
const char PROTO_MOTOPN[]				= "mod:Prototypes/Vehicles/Police/BMW1200RTPN.e4p";

// Déclarations de véhicules des Services Techniques

int DummyGroup = 20;

// 01.0 - Déclaration de la commande Deux_Tons
object Deux_Tons : CommandScript
{
	Deux_Tons()
	{
		SetIcon(IMG);
		SetCursor(IMG);
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid())
			return false;

		if (Caller->GetType() == ACTOR_VEHICLE)
		{
			return true;
		}

		return false;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Target->IsValid() || Target->GetID() != Caller->GetID())
			return false;

		if (!Caller->HasCommand(CMD_MOVETO) || Caller->GetType() != ACTOR_VEHICLE)
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		if (!v.HasCommand(DUMMY_HASSIREN) && (childID != 2 && childID != 1))
		{

			int soundID;
			v.EnableBlueLights(true);
			Vector CarPos = v.GetPosition();

				
				
				// Déclarations de véhicules Sapeurs Pompiers
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_CA) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_FPTAtego) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_FPTMidlum) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_CCR) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_CD) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}				
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_CESD) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VAG) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}	
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VSC) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_PCDSM) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}	

				if (StrCompare(v.GetPrototypeFileName(), PROTO_CSP) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}					

				if (StrCompare(v.GetPrototypeFileName(), PROTO_VPS) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 					
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VIGI) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 			
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VTP) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VSAV) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}	

				if (StrCompare(v.GetPrototypeFileName(), PROTO_VSAV2) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_PSR) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}				

				if (StrCompare(v.GetPrototypeFileName(), PROTO_ARIveco) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_ARMaster) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}
 				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_VES) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/vsav.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_CRAC) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_VIMP) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_PEV) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_PSE4) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_PSE5) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_SIS) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_SPVL2clio) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_SPVLclio) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_SPVLkangoo) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}

				if (StrCompare(v.GetPrototypeFileName(), PROTO_VIDkangoo) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_SPTT) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_CIC_CRR) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_EPAAtego) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_EPAIveco) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/pompier.wav", CarPos, true);
 				}

				//Fin declaration vehicules de pompier
				
				
				
				//Vehicules de Ambulance - debut
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MasterPC) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/samu2.wav", CarPos, true);
 				}
				
				//Vehicules de Ambulance - fin
				
				
				
				// Déclarations de véhicules de la police - debut
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERPN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERPN2) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERPN3) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERPN4) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_SCENIC) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_C4BAN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_BERLINGOPN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_C4GN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/gendarmerie.wav", CarPos, true);
 				}
						
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERVTD) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_308PN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_GIGN2) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_C8GIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_ESPACEGIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_EXPERTGIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERGIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MASTERCRS) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_TRANSITCRS) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_207SW) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_308GIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_DEMINAGE) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MONDEO75N) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_GIGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MOTOPN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/police.wav", CarPos, true);
 				}
				
				if (StrCompare(v.GetPrototypeFileName(), PROTO_MOTOGN) == 0)
 				{
 					
 					soundID = Audio::PlaySample3D("mod:Audio/FX/Sirene/gendarmerie.wav", CarPos, true);
 				}
				// Déclarations de véhicules de la police - fin
				
				GameObject mDummy =  Game::CreateObject("mod:Prototypes/Objects/Misc/empty.e4p", NAME_DUMMYOBJECT);

				mDummy.Hide();
				mDummy.SetPosition(CarPos);
				mDummy.SetUserData(soundID);
				mDummy.PushActionExecuteCommand(ACTION_NEWLIST, DUMMY_UPDATEPOS, &v, soundID, false);
				v.SetUserData(soundID);
				v.AssignCommand(DUMMY_HASSIREN);

			return;
		}

		if (v.HasCommand(DUMMY_HASSIREN))
		{
			if (childID == 1)
			{
				v.EnableBlueLights(false);
			}

			if (v.HasCommand(DUMMY_HASSIREN))
			{
				int ref = Caller->GetUserData();
				Audio::StopSample(ref);

				GameObjectList list = Game::GetGameObjects(NAME_DUMMYOBJECT);
				for(int i=0; i<list.GetNumObjects(); i++)
				{
					GameObject *obj = list.GetObject(i);
					if (obj->GetUserData() == ref)
					{
						int mSirTest = i;
					}
				}

				GameObject *obj = list.GetObject(mSirTest);
				obj->PushActionDeleteOwner(ACTION_NEWLIST);
				v.RemoveCommand(DUMMY_HASSIREN);
			}

			return;
		}
	}
};

// 01.1 - Déclaration de la commande DUMMYUpdatePos
object DUMMYUpdatePos : CommandScript
{
	DUMMYUpdatePos()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Target);
		GameObject mDummy(Caller);
		Vector CarPos = v.GetPosition();

		if (v.IsDestroyed() || !v.IsValid())
		{
			int ref = mDummy.GetUserData();
			Audio::StopSample(ref);

			mDummy.PushActionDeleteOwner(ACTION_NEWLIST);
		} else
		  {
			mDummy.SetPosition(CarPos);
			Audio::UpdatePos(childID, CarPos, true);
			if (v.IsCurrentAction(EACTION_FINDPATH))
			{
				if (!v.HasCommand(DUMMY_FINDPATH))
				{
					v.AssignCommand(DUMMY_FINDPATH);
				}
			}
			mDummy.PushActionExecuteCommand(ACTION_NEWLIST, DUMMY_UPDATEPOS, Target, childID, false);
		  }

		if (v.HasCommand(DUMMY_FINDPATH))
		{
			if (!v.IsCurrentAction(EACTION_FINDPATH) && v.GetNumActions() == 0)
			{
				v.RemoveCommand(DUMMY_HASSIREN);
				v.RemoveCommand(DUMMY_FINDPATH);

				int ref = Caller->GetUserData();
				Audio::StopSample(ref);

				GameObjectList list = Game::GetGameObjects(NAME_DUMMYOBJECT);
				for(int i = 0; i < list.GetNumObjects(); i++)
				{
					GameObject *obj = list.GetObject(i);
					if (obj->GetUserData() == ref)
					{
						int mSirTest = i;

						GameObject *obj = list.GetObject(mSirTest);
						obj->PushActionDeleteOwner(ACTION_NEWLIST);
						v.RemoveCommand(DUMMY_HASSIREN);
						if (v.HasCommand(DUMMY_FINDPATH))
						{
							v.RemoveCommand(DUMMY_FINDPATH);
						}
					}
				}
			}
		}
	}
};

// 01.2 - Déclaration de la commande DUMMYDisableSiren
object DUMMYDisableSiren : CommandScript
{
	DUMMYDisableSiren()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);

		if (childID == 1)
		{
			v.EnableBlueLights(false);
		}

		int ref = Caller->GetUserData();
		Audio::StopSample(ref);

		GameObjectList list = Game::GetGameObjects(NAME_DUMMYOBJECT);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == ref)
			{
				int mSirTest = i;

				GameObject *obj = list.GetObject(mSirTest);
				obj->PushActionDeleteOwner(ACTION_NEWLIST);
				v.RemoveCommand(DUMMY_HASSIREN);
				if (v.HasCommand(DUMMY_FINDPATH))
				{
					v.RemoveCommand(DUMMY_FINDPATH);
				}
			}
		}
	}
};

// 01.3 - Déclaration de la commande DUMMYFindPath
object DUMMYFindPath : CommandScript
{
	DUMMYFindPath()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};

// 01.4 - Déclaration de la commande DUMMYHasSiren
object DUMMYHasSiren : CommandScript
{
	DUMMYHasSiren()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckGroupVisibility(GameObject *Caller)
	{
		return false;
	}

	bool CheckPossible(GameObject *Caller)
	{
		return false;
	}


	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};