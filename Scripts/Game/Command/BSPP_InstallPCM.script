const char PROTO_VPCM[] 				= "mod:Prototypes/Vehicles/Ambulance/VPCM.e4p";
const char PROTO_VPCM_2[] 				= "mod:Prototypes/Vehicles/Ambulance/VPCM_2.e4p";

const char UNNAMED[]					= "Unnamed";
const char InstallSound[]				= "mod:Audio/FX/misc/Ladderinstall.wav";

object PCMInstall : CommandScript 
{
   	PCMInstall() 
	{
		SetIcon("install"); 
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
    		if(!Caller->IsValid() || !Target->IsValid() || Caller->GetID() != Target->GetID())
        	return false;
    
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
			Audio::PlaySample(InstallSound);
			Vehicle v(Caller);
			v.PushActionWait(ACTION_APPEND, 2.5f);
			Vector Pos = v.GetPosition();
				float r[9];
				float childr[9];
			v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			Vehicle m = Game::CreateVehicle(PROTO_VPCM_2, "unnamed");
			m.SetUserData(v.GetID());
			m.SetPlayerMP(v.GetPlayerMP());
           		m.SetPosition(Pos);
			Math::EulerToMatrix(0.f, 0.f, 0.f, childr);
			Math::MultiplyMatrices(childr, r);
			m.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
           		m.UpdatePlacement();
			m.SetMaxPassengers(2);
			m.SetMaxTransports(6);
			m.PlayAnimOpenDoor(DAT_SPECIAL, 1.0f, Caller);
			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}
			v.SetCommandable(false);
			v.PushActionExecuteCommand(ACTION_APPEND, "DUMMYDECON", Caller, 2, false);
			v.PushActionDeleteOwner(ACTION_NEWLIST);
	}
};

object PCMUninstall : CommandScript 
{
   	PCMUninstall() 
	{
		SetIcon("deinstall"); 
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
    		if(!Caller->IsValid() || !Target->IsValid() || Caller->GetID() != Target->GetID())
        	return false;
    
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
 	{
 			Vehicle v(Caller);
			v.PushActionWait(ACTION_APPEND, 2.5f);
			Audio::PlaySample(InstallSound);
			Vector Pos = v.GetPosition();
				float r[9];
				float childr[9];
			v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			Vehicle m = Game::CreateVehicle(PROTO_VPCM, "unnamed");
			if (m.HasAnimation("deinstall"))
				m.SetAnimation("deinstall");
			m.SetUserData(v.GetID());
			m.SetPlayerMP(v.GetPlayerMP());
           		m.SetPosition(Pos);
			Math::EulerToMatrix(0.f, 0.f, 0.f, childr);
			Math::MultiplyMatrices(childr, r);
			m.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
            		m.UpdatePlacement();
			m.SetMaxPassengers(2);
			m.SetMaxTransports(0);
			m.PlayAnimCloseDoor(DAT_SPECIAL, 1.0f, Caller);
			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}
			if (!v.IsBlueLightEnabled())
				m.EnableBlueLights(false);
			v.SetCommandable(false);
			v.PushActionExecuteCommand(ACTION_APPEND, "DUMMYDECON", Caller, 1, false);
			v.PushActionDeleteOwner(ACTION_NEWLIST);
 	}	
};

object DUMMYDECON  : CommandScript
{ 
	DUMMYDECON()
	{
		SetGroupID(20);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return false;
	}
	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
 	{
		if (childID == 1)
		{
			v.SetCommandable(true);
		}
		if (childID == 2)
		{
			v.SetCommandable(true);	
			v.PlayAnimOpenDoor(DAT_SPECIAL, 1.0f, Caller);
		}
	}
};