//******************************************************************************************
//
//		Script CosCommand BSPP
//		Edité par Superjajaman75 pour MOD BSPP
//		Reproduction autorisé avec conservation crédit
//
//******************************************************************************************

const char CMD_VSAVR[]			= "Renfort_VSAVR";
const char CMD_VSAVB[]			= "Renfort_VSAVB";
const char CMD_PSR[]			= "Renfort_PSR";
const char CMD_ARIveco[]		= "Renfort_ARIveco";
const char CMD_ARMaster[]		= "Renfort_ARMaster";
const char CMD_VES[]			= "Renfort_VES";
const char CMD_VAS[]		= "Renfort_VAS";
const char CMD_CMO[]			= "Renfort_CMO";
const char CMD_VPCM[]			= "Renfort_VPCM";

const char CMD_MasterPC[]		= "Renfort_MasterPC";
const char CMD_MasterPC2[]		= "Renfort_MasterPC2";
const char CMD_MasterPC3[]		= "Renfort_MasterPC3";
const char CMD_308PC[]			= "Renfort_308PC";

const char CMD_UMHmaster[]			= "Renfort_UMHMASTER";
const char CMD_UMHmsprinter[]			= "Renfort_UMHSPRINTER";
const char CMD_PCMsamu[]			= "Renfort_PCMSAMU";
const char CMD_VLMkangoo[]		= "Renfort_VLMkangoo";
const char CMD_VLMsprinter[]			= "Renfort_VLMsprinter";
const char CMD_BUSSAMU[]		= "Renfort_BUSSAMU";


const char CMD_VSC[]			= "Renfort_VSC";
const char CMD_VEC[]			= "Renfort_VEC";
const char CMD_VLRVETO[]	= "Renfort_VLRVETO";
const char CMD_PFG[]		= "Renfort_PFG";




const char CMD_CA[]				= "Renfort_CA";
const char CMD_CCR[]			= "Renfort_CCR";
const char CMD_CD[]				= "Renfort_CD";
const char CMD_CESD[]			= "Renfort_CESD";
const char CMD_CIC_CIB[]		= "Renfort_CIC_CIB";
const char CMD_CRAC[]			= "Renfort_CRAC";
const char CMD_CSP[]			= "Renfort_CSP";
const char CMD_SIS[]			= "Renfort_SIS";
const char CMD_SIS2[]			= "Renfort_SIS2";
const char CMD_EPAAtego[]		= "Renfort_EPAAtego";
const char CMD_EPAIveco[]		= "Renfort_EPAIveco";
const char CMD_FPTAtego[]		= "Renfort_FPTAtego";
const char CMD_FPTMidlum[]		= "Renfort_FPTMidlum";
const char CMD_PST[]			= "Renfort_PST";
const char CMD_VIMP[]			= "Renfort_VIMP";
const char CMD_PEV[]			= "Renfort_PEV";
const char CMD_PSE2[]			= "Renfort_PSE2";
const char CMD_PSE3[]			= "Renfort_PSE3";
const char CMD_PSE4[]			= "Renfort_PSE4";
const char CMD_PSE5[]			= "Renfort_PSE5";
const char CMD_SPTT[]			= "Renfort_SPTT";
const char CMD_SPVLclio3[]		= "Renfort_SPVLclio3";
const char CMD_SPVLclioIV[]		= "Renfort_SPVLclioIV";
const char CMD_SPVLmegane[]		= "Renfort_SPVLmegane";
const char CMD_SPVL308[]			= "Renfort_SPVL308";
const char CMD_SPVLkangoo[]		= "Renfort_SPVLkangoo";
const char CMD_SPVLup[]		= "Renfort_SPVLup";
const char CMD_SPVLgolf[]		= "Renfort_SPVLkgolf";
const char CMD_VAG[]			= "Renfort_VAG";
const char CMD_VELD[]			= "Renfort_VELD";
const char CMD_VID[]			= "Renfort_VID";
const char CMD_VID2[]			= "Renfort_VID2";
const char CMD_VIGI[]			= "Renfort_VIGI";
const char CMD_VPS[]			= "Renfort_VPS";
const char CMD_VPB[]			= "Renfort_VPB";
const char CMD_VPC[]			= "Renfort_VPC";


const char CMD_CSFL[]			= "FeuLegerCS";
const char CMD_CSNOR[]			= "DepartNormalCS";
const char CMD_CSRI[]			= "RenfortIncendieCS";
const char CMD_CSRH[]			= "RenfortHabitationCS";
const char CMD_CSRA[]			= "RenfortAnticipationCS";
const char CMD_CSRC[]			= "RenfortCommandementCS";
const char CMD_CSSRM[]			= "SecoursRoutierMoyenCS";
const char CMD_CSSRL[]			= "SecoursRoutierLourdCS";
const char CMD_CSSRA[]			= "SecoursRoutierAquatiqueCS";
const char CMD_CSUM[]			= "UrgenceMedicaleCS";
const char CMD_CSSM[]			= "SecoursMedicalCS";
const char CMD_CSTS[]			= "TentativeSuicideCS";
const char CMD_CSGIFF[]			= "GiffCS";


const char OBJ_COS[]			= "mod:Prototypes/Persons/Fire Department/COSsp.e4p";

int DummyGroup = 20;


object COSDepartCS : CommandScript
{
 	COSDepartCS()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("departcs");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_CSFL);
		Caller->EnableCommand(CMD_CSFL, true);
		Caller->AssignCommand(CMD_CSNOR);
		Caller->EnableCommand(CMD_CSNOR, true);
		Caller->AssignCommand(CMD_CSRI);
		Caller->EnableCommand(CMD_CSRI, true);
		Caller->AssignCommand(CMD_CSRH);
		Caller->EnableCommand(CMD_CSRH, true);
		Caller->AssignCommand(CMD_CSRA);
		Caller->EnableCommand(CMD_CSRA, true);
		Caller->AssignCommand(CMD_CSRC);
		Caller->EnableCommand(CMD_CSRC, true);
		Caller->AssignCommand(CMD_CSSRM);
		Caller->EnableCommand(CMD_CSSRM, true);
		Caller->AssignCommand(CMD_CSSRL);
		Caller->EnableCommand(CMD_CSSRL, true);
		Caller->AssignCommand(CMD_CSUM);
		Caller->EnableCommand(CMD_CSUM, true);
		Caller->AssignCommand(CMD_CSSM);
		Caller->EnableCommand(CMD_CSSM, true);
		Caller->AssignCommand(CMD_CSTS);
		Caller->EnableCommand(CMD_CSTS, true);
		Caller->AssignCommand(CMD_CSGIFF);
		Caller->EnableCommand(CMD_CSGIFF, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSSAP : CommandScript
{
 	COSSAP()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cossap");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_VSAVR);
		Caller->EnableCommand(CMD_VSAVR, true);
		Caller->AssignCommand(CMD_VSAVB);
		Caller->EnableCommand(CMD_VSAVB, true);
		Caller->AssignCommand(CMD_PSR);
		Caller->EnableCommand(CMD_PSR, true);
		Caller->AssignCommand(CMD_ARIveco);
		Caller->EnableCommand(CMD_ARIveco, true);
		Caller->AssignCommand(CMD_ARMaster);
		Caller->EnableCommand(CMD_ARMaster, true);
		Caller->AssignCommand(CMD_VPCM);
		Caller->EnableCommand(CMD_VPCM, true);
		Caller->AssignCommand(CMD_PFG);
		Caller->EnableCommand(CMD_PFG, true);
		Caller->AssignCommand(CMD_VES);
		Caller->EnableCommand(CMD_VES, true);
		Caller->AssignCommand(CMD_MasterPC);
		Caller->EnableCommand(CMD_MasterPC, true);
		Caller->AssignCommand(CMD_MasterPC2);
		Caller->EnableCommand(CMD_MasterPC2, true);
		Caller->AssignCommand(CMD_MasterPC3);
		Caller->EnableCommand(CMD_MasterPC3, true);
		Caller->AssignCommand(CMD_308PC);
		Caller->EnableCommand(CMD_308PC, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSINC : CommandScript
{
 	COSINC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosinc");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_FPTAtego);
		Caller->EnableCommand(CMD_FPTAtego, true);
		Caller->AssignCommand(CMD_FPTMidlum);
		Caller->EnableCommand(CMD_FPTMidlum, true);
		Caller->AssignCommand(CMD_PST);
		Caller->EnableCommand(CMD_PST, true);
		Caller->AssignCommand(CMD_EPAAtego);
		Caller->EnableCommand(CMD_EPAAtego, true);
		Caller->AssignCommand(CMD_EPAIveco);
		Caller->EnableCommand(CMD_EPAIveco, true);
		Caller->AssignCommand(CMD_PSE2);
		Caller->EnableCommand(CMD_PSE2, true);
		Caller->AssignCommand(CMD_PSE3);
		Caller->EnableCommand(CMD_PSE3, true);
		Caller->AssignCommand(CMD_PSE4);
		Caller->EnableCommand(CMD_PSE4, true);
		Caller->AssignCommand(CMD_PSE5);
		Caller->EnableCommand(CMD_PSE5, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSDIV : CommandScript
{
 	COSDIV()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosdiv");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_VID);
		Caller->EnableCommand(CMD_VID, true);
		Caller->AssignCommand(CMD_VID2);
		Caller->EnableCommand(CMD_VID2, true);
		Caller->AssignCommand(CMD_VIGI);
		Caller->EnableCommand(CMD_VIGI, true);
		Caller->AssignCommand(CMD_CA);
		Caller->EnableCommand(CMD_CA, true);
		Caller->AssignCommand(CMD_CD);
		Caller->EnableCommand(CMD_CD, true);
		Caller->AssignCommand(CMD_SPTT);
		Caller->EnableCommand(CMD_SPTT, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSFDF : CommandScript
{
 	COSFDF()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosfdf");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_CCR);
		Caller->EnableCommand(CMD_CCR, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSSPE : CommandScript
{
 	COSSPE()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosspe");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_SIS);
		Caller->EnableCommand(CMD_SIS, true);
		Caller->AssignCommand(CMD_SIS2);
		Caller->EnableCommand(CMD_SIS2, true);
		Caller->AssignCommand(CMD_CSP);
		Caller->EnableCommand(CMD_CSP, true);
		Caller->AssignCommand(CMD_VIMP);
		Caller->EnableCommand(CMD_VIMP, true);
		Caller->AssignCommand(CMD_VAG);
		Caller->EnableCommand(CMD_VAG, true);
		Caller->AssignCommand(CMD_PEV);
		Caller->EnableCommand(CMD_PEV, true);
		Caller->AssignCommand(CMD_CESD);
		Caller->EnableCommand(CMD_CESD, true);
		Caller->AssignCommand(CMD_VSC);
		Caller->EnableCommand(CMD_VSC, true);
		Caller->AssignCommand(CMD_VEC);
		Caller->EnableCommand(CMD_VEC, true);
		Caller->AssignCommand(CMD_CRAC);
		Caller->EnableCommand(CMD_CRAC, true);
		Caller->AssignCommand(CMD_CIC_CIB);
		Caller->EnableCommand(CMD_CIC_CIB, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSGOC : CommandScript
{
 	COSGOC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgoc");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_SPVLclio3);
		Caller->EnableCommand(CMD_SPVLclio3, true);
		Caller->AssignCommand(CMD_SPVLclioIV);
		Caller->EnableCommand(CMD_SPVLclioIV, true);
		Caller->AssignCommand(CMD_SPVLkangoo);
		Caller->EnableCommand(CMD_SPVLkangoo, true);
		Caller->AssignCommand(CMD_SPVL308);
		Caller->EnableCommand(CMD_SPVL308, true);
		Caller->AssignCommand(CMD_SPVLmegane);
		Caller->EnableCommand(CMD_SPVLmegane, true);
		Caller->AssignCommand(CMD_SPVLup);
		Caller->EnableCommand(CMD_SPVLup, true);
		Caller->AssignCommand(CMD_SPVLgolf);
		Caller->EnableCommand(CMD_SPVLgolf, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSMenu : CommandScript
{
 	COSMenu()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->EnableCommand("COSDepartCS", true);
		Caller->EnableCommand("COSSAP", true);
		Caller->EnableCommand("COSINC", true);
		Caller->EnableCommand("COSDIV", true);
		Caller->EnableCommand("COSSPE", true);
		Caller->EnableCommand("COSGOC", true);
		Caller->EnableCommand("COSFDF", true);

		if (StrCompare(Caller->GetPrototypeFileName(), OBJ_COS) == 0)
		{
			Caller->EnableCommand("MoveTo", true);
			Caller->EnableCommand("EnterCar", true);
			Caller->EnableCommand("Init_CSLAND", true);
			Caller->EnableCommand("Init_CSBITCHE", true);
			Caller->EnableCommand("Init_CSGRENELLE", true);
		}
	}
};

object COSMenuPol : CommandScript
{
 	COSMenuPol()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->EnableCommand("COSPN", true);
		Caller->EnableCommand("COSBAC", true);
		Caller->EnableCommand("COSBRI", true);
		Caller->EnableCommand("COSCRS", true);
		Caller->EnableCommand("COSGN", true);
		/*Caller->EnableCommand("COSGM", true);*/
		
		Caller->EnableCommand("MoveTo", true);
		Caller->EnableCommand("EnterCar", true);
		
		Caller->EnableCommand("Renfort_PNDEMINAGE", true);
		Caller->EnableCommand("Renfort_Fuite", true);

	}
};

object COSBAC : CommandScript
{
 	COSBAC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosbac");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_BAC207SW");
		Caller->EnableCommand("Renfort_BAC207SW", true);
		Caller->AssignCommand("Renfort_BACC4");
		Caller->EnableCommand("Renfort_BACC4", true);
		Caller->AssignCommand("Renfort_BAC75N2");
		Caller->EnableCommand("Renfort_BAC75N2", true);
		Caller->AssignCommand("Renfort_BACMONDEO75N");
		Caller->EnableCommand("Renfort_BACMONDEO75N", true);
		Caller->AssignCommand("Renfort_BAC208");
		Caller->EnableCommand("Renfort_BAC208", true);
		Caller->AssignCommand("Renfort_BACC3");
		Caller->EnableCommand("Renfort_BACC3", true);
		Caller->AssignCommand("Renfort_BACFiesta");
		Caller->EnableCommand("Renfort_BACFiesta", true);
		Caller->AssignCommand("Renfort_BACFocus");
		Caller->EnableCommand("Renfort_BACFocus", true);
		Caller->AssignCommand("Renfort_BACSkoda");
		Caller->EnableCommand("Renfort_BACSkoda", true);
		Caller->AssignCommand("Renfort_BACFluence");
		Caller->EnableCommand("Renfort_BACFluence", true);
		Caller->AssignCommand("Renfort_BACCaptur");
		Caller->EnableCommand("Renfort_BACCaptur", true);
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSPN : CommandScript
{
 	COSPN()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cospn");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_PNMASTER");
		Caller->EnableCommand("Renfort_PNMASTER", true);
		Caller->AssignCommand("Renfort_PNMASTER2");
		Caller->EnableCommand("Renfort_PNMASTER2", true);
		Caller->AssignCommand("Renfort_PNMASTER3");
		Caller->EnableCommand("Renfort_PNMASTER3", true);
		Caller->AssignCommand("Renfort_PNMASTER4");
		Caller->EnableCommand("Renfort_PNMASTER4", true);
		Caller->AssignCommand("Renfort_PNSCENIC");
		Caller->EnableCommand("Renfort_PNSCENIC", true);
		Caller->AssignCommand("Renfort_PN308");
		Caller->EnableCommand("Renfort_PN308", true);
		Caller->AssignCommand("Renfort_PNBerlingo");
		Caller->EnableCommand("Renfort_PNBerlingo", true);
		/*Caller->AssignCommand("Renfort_PNBerlingoPMV");
		Caller->EnableCommand("Renfort_PNBerlingoPMV", true);*/
		Caller->AssignCommand("Renfort_PNMASTERVTD");
		Caller->EnableCommand("Renfort_PNMASTERVTD", true);
		Caller->AssignCommand("Renfort_PNMOTO");
		Caller->EnableCommand("Renfort_PNMOTO", true);
		/*Caller->AssignCommand("Renfort_PNEstate");
		Caller->EnableCommand("Renfort_PNEstate", true);*/
		Caller->AssignCommand("Renfort_PNC8");
		Caller->EnableCommand("Renfort_PNC8", true);
		/*Caller->AssignCommand("Renfort_PNTRAFIC");
		Caller->EnableCommand("Renfort_PNTRAFIC", true);
		Caller->AssignCommand("Renfort_PNTRAFIC2");
		Caller->EnableCommand("Renfort_PNTRAFIC2", true);
		Caller->AssignCommand("Renfort_PNTRAFICPMV");
		Caller->EnableCommand("Renfort_PNTRAFICPMV", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSBRI : CommandScript
{
 	COSBRI()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosbri");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_308GIGN");
		Caller->EnableCommand("Renfort_308GIGN", true);
		Caller->AssignCommand("Renfort_ESPACEGIGN");
		Caller->EnableCommand("Renfort_ESPACEGIGN", true);
		Caller->AssignCommand("Renfort_EXPERTGIGN");
		Caller->EnableCommand("Renfort_EXPERTGIGN", true);
		Caller->AssignCommand("Renfort_C8GIGN");
		Caller->EnableCommand("Renfort_C8GIGN", true);
		Caller->AssignCommand("Renfort_GIGN");
		Caller->EnableCommand("Renfort_GIGN", true);
		Caller->AssignCommand("Renfort_GIGN2");
		Caller->EnableCommand("Renfort_GIGN2", true);
		Caller->AssignCommand("Renfort_MASTERGIGN");
		Caller->EnableCommand("Renfort_MASTERGIGN", true);
		/*Caller->AssignCommand("Renfort_TITUSGIGN");
		Caller->EnableCommand("Renfort_TITUSGIGN", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSCRS : CommandScript
{
 	COSCRS()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("coscrs");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_MASTERCRS");
		Caller->EnableCommand("Renfort_MASTERCRS", true);
		Caller->AssignCommand("Renfort_TRANSITCRS");
		Caller->EnableCommand("Renfort_TRANSITCRS", true);
		Caller->AssignCommand("Renfort_BUSCRS");
		Caller->EnableCommand("Renfort_BUSCRS", true);
		Caller->AssignCommand("Renfort_CANONCRS");
		Caller->EnableCommand("Renfort_CANONCRS", true);
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSGN : CommandScript
{
 	COSGN()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgn");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_GNC4");
		Caller->EnableCommand("Renfort_GNC4", true);
		/*Caller->AssignCommand("Renfort_GNC4_2");
		Caller->EnableCommand("Renfort_GNC4_2", true);
		Caller->AssignCommand("Renfort_GNESTATE");
		Caller->EnableCommand("Renfort_GNESTATE", true);*/
		Caller->AssignCommand("Renfort_GNMOTO");
		Caller->EnableCommand("Renfort_GNMOTO", true);
		/*Caller->AssignCommand("Renfort_GNKANGOO");
		Caller->EnableCommand("Renfort_GNKANGOO", true);
		Caller->AssignCommand("Renfort_GNKANGOO2");
		Caller->EnableCommand("Renfort_GNKANGOO2", true);
		Caller->AssignCommand("Renfort_GNKANGOOCYNO");
		Caller->EnableCommand("Renfort_GNKANGOOCYNO", true);
		Caller->AssignCommand("Renfort_GNEXPERT");
		Caller->EnableCommand("Renfort_GNEXPERT", true);
		Caller->AssignCommand("Renfort_GNC8");
		Caller->EnableCommand("Renfort_GNC8", true);
		Caller->AssignCommand("Renfort_GN3008");
		Caller->EnableCommand("Renfort_GN3008", true);
		Caller->AssignCommand("Renfort_GNBIPPER");
		Caller->EnableCommand("Renfort_GNBIPPER", true);
		Caller->AssignCommand("Renfort_GNDUSTER");
		Caller->EnableCommand("Renfort_GNDUSTER", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSGM : CommandScript
{
 	COSGM()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgm");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		/*Caller->AssignCommand("Renfort_GNBUS");
		Caller->EnableCommand("Renfort_GNBUS", true);
		Caller->AssignCommand("Renfort_GNIVECO");
		Caller->EnableCommand("Renfort_GNIVECO", true);
		Caller->AssignCommand("Renfort_GNIVECO2");
		Caller->EnableCommand("Renfort_GNIVECO2", true);
		Caller->AssignCommand("Renfort_GNIVECO3");
		Caller->EnableCommand("Renfort_GNIVECO3", true);
		Caller->AssignCommand("Renfort_GNVRBG");
		Caller->EnableCommand("Renfort_GNVRBG", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};
