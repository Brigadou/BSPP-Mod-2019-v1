//******************************************************************************************
//
//		Script CosCommand BSPP
//		Edité par Superjajaman75 pour MOD BSPP
//		Reproduction autorisé avec conservation crédit
//
//******************************************************************************************

const char CMD_CSFL[]			= "FeuLegerCS";
const char CMD_CSNOR[]			= "DepartNormalCS";
const char CMD_CSRI[]			= "RenfortIncendieCS";
const char CMD_CSRH[]			= "RenfortHabitationCS";
const char CMD_CSRA[]			= "RenfortAnticipationCS";
const char CMD_CSRC[]			= "RenfortCommandementCS";
const char CMD_CSSRM[]			= "SecoursRoutierMoyenCS";
const char CMD_CSSRL[]			= "SecoursRoutierLourdCS";
const char CMD_CSSRA[]			= "SecoursRoutierAquatiqueCS";
const char CMD_CSUM[]			= "UrgenceMedicaleCS";
const char CMD_CSSM[]			= "SecoursMedicalCS";
const char CMD_CSTS[]			= "TentativeSuicideCS";
const char CMD_CSGIFF[]			= "GiffCS";


const char OBJ_COS[]			= "mod:Prototypes/Persons/Fire Department/COSsp.e4p";

int DummyGroup = 20;


object COSDepartCS : CommandScript
{
 	COSDepartCS()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("departcs");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand(CMD_CSFL);
		Caller->EnableCommand(CMD_CSFL, true);
		Caller->AssignCommand(CMD_CSNOR);
		Caller->EnableCommand(CMD_CSNOR, true);
		Caller->AssignCommand(CMD_CSRI);
		Caller->EnableCommand(CMD_CSRI, true);
		Caller->AssignCommand(CMD_CSRH);
		Caller->EnableCommand(CMD_CSRH, true);
		Caller->AssignCommand(CMD_CSRA);
		Caller->EnableCommand(CMD_CSRA, true);
		Caller->AssignCommand(CMD_CSRC);
		Caller->EnableCommand(CMD_CSRC, true);
		Caller->AssignCommand(CMD_CSSRM);
		Caller->EnableCommand(CMD_CSSRM, true);
		Caller->AssignCommand(CMD_CSSRL);
		Caller->EnableCommand(CMD_CSSRL, true);
		Caller->AssignCommand(CMD_CSUM);
		Caller->EnableCommand(CMD_CSUM, true);
		Caller->AssignCommand(CMD_CSSM);
		Caller->EnableCommand(CMD_CSSM, true);
		Caller->AssignCommand(CMD_CSTS);
		Caller->EnableCommand(CMD_CSTS, true);
		Caller->AssignCommand(CMD_CSGIFF);
		Caller->EnableCommand(CMD_CSGIFF, true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSSAP : CommandScript
{
 	COSSAP()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cossap");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_VSAVR");
		Caller->EnableCommand("Renfort_VSAVR", true);
		Caller->AssignCommand("Renfort_VSAVB");
		Caller->EnableCommand("Renfort_VSAVB", true);
		Caller->AssignCommand("Renfort_PSR");
		Caller->EnableCommand("Renfort_PSR", true);
		Caller->AssignCommand("Renfort_ARIveco");
		Caller->EnableCommand("Renfort_ARIveco", true);
		Caller->AssignCommand("Renfort_ARMaster");
		Caller->EnableCommand("Renfort_ARMaster", true);
		Caller->AssignCommand("Renfort_VPCM");
		Caller->EnableCommand("Renfort_VPCM", true);
		Caller->AssignCommand("Renfort_VES");
		Caller->EnableCommand("Renfort_VES", true);
		Caller->AssignCommand("Renfort_MasterPC");
		Caller->EnableCommand("Renfort_MasterPC", true);
		Caller->AssignCommand("Renfort_MasterPC2");
		Caller->EnableCommand("Renfort_MasterPC2", true);
		Caller->AssignCommand("Renfort_MasterPC3");
		Caller->EnableCommand("Renfort_MasterPC3", true);
		Caller->AssignCommand("Renfort_308PC");
		Caller->EnableCommand("Renfort_308PC", true);
		Caller->AssignCommand("Renfort_PFG");
		Caller->EnableCommand("Renfort_PFG", true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSINC : CommandScript
{
 	COSINC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosinc");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_FPTAtego");
		Caller->EnableCommand("Renfort_FPTAtego", true);
		Caller->AssignCommand("Renfort_FPTMidlum");
		Caller->EnableCommand("Renfort_FPTMidlum", true);
		Caller->AssignCommand("Renfort_PST");
		Caller->EnableCommand("Renfort_PST", true);
		Caller->AssignCommand("Renfort_EPAAtego");
		Caller->EnableCommand("Renfort_EPAAtego", true);
		Caller->AssignCommand("Renfort_EPAIveco");
		Caller->EnableCommand("Renfort_EPAIveco", true);
		Caller->AssignCommand("Renfort_PSE2");
		Caller->EnableCommand("Renfort_PSE2", true);
		Caller->AssignCommand("Renfort_PSE3");
		Caller->EnableCommand("Renfort_PSE3", true);
		Caller->AssignCommand("Renfort_PSE4");
		Caller->EnableCommand("Renfort_PSE4", true);
		Caller->AssignCommand("Renfort_PSE5");
		Caller->EnableCommand("Renfort_PSE5", true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSDIV : CommandScript
{
 	COSDIV()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosdiv");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_VID");
		Caller->EnableCommand("Renfort_VID", true);
		Caller->AssignCommand("Renfort_VID2");
		Caller->EnableCommand("Renfort_VID2", true);
		Caller->AssignCommand("Renfort_VIGI");
		Caller->EnableCommand("Renfort_VIGI", true);
		Caller->AssignCommand("Renfort_CA");
		Caller->EnableCommand("Renfort_CA", true);
		Caller->AssignCommand("Renfort_CD");
		Caller->EnableCommand("Renfort_CD", true);
		Caller->AssignCommand("Renfort_SPTT");
		Caller->EnableCommand("Renfort_SPTT", true);
		Caller->AssignCommand("Renfort_CESD");
		Caller->EnableCommand("Renfort_CESD", true);
		Caller->AssignCommand("Renfort_CRAC");
		Caller->EnableCommand("Renfort_CRAC", true);
		Caller->AssignCommand("Renfort_PEV");
		Caller->EnableCommand("Renfort_PEV", true);
		/*Caller->AssignCommand("Renfort_VPB");
		Caller->EnableCommand("Renfort_VPB", true);*/
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSFDF : CommandScript
{
 	COSFDF()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosfdf");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_CCR");
		Caller->EnableCommand("Renfort_CCR", true);
		/*Caller->AssignCommand("Renfort_VIVP");
		Caller->EnableCommand("Renfort_VIVP", true);*/
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSSPE : CommandScript
{
 	COSSPE()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosspe");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_VSC");
		Caller->EnableCommand("Renfort_VSC", true);
		Caller->AssignCommand("Renfort_VEC");
		Caller->EnableCommand("Renfort_VEC", true);
		Caller->AssignCommand("Renfort_SIS");
		Caller->EnableCommand("Renfort_SIS", true);
		Caller->AssignCommand("Renfort_SIS2");
		Caller->EnableCommand("Renfort_SIS2", true);
		Caller->AssignCommand("Renfort_CSP");
		Caller->EnableCommand("Renfort_CSP", true);
		Caller->AssignCommand("Renfort_VIMP");
		Caller->EnableCommand("Renfort_VIMP", true);
		Caller->AssignCommand("Renfort_VAG");
		Caller->EnableCommand("Renfort_VAG", true);
		Caller->AssignCommand("Renfort_CICCIB");
		Caller->EnableCommand("Renfort_CICCIB", true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSGOC : CommandScript
{
 	COSGOC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgoc");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_SPVLclio3");
		Caller->EnableCommand("Renfort_SPVLclio3", true);
		Caller->AssignCommand("Renfort_SPVLclio4");
		Caller->EnableCommand("Renfort_SPVLclio4", true);
		Caller->AssignCommand("Renfort_SPVL308");
		Caller->EnableCommand("Renfort_SPVL308", true);
		Caller->AssignCommand("Renfort_SPVLkangoo");
		Caller->EnableCommand("Renfort_SPVLkangoo", true);
		Caller->AssignCommand("Renfort_SPVLmegane");
		Caller->EnableCommand("Renfort_SPVLmegane", true);
		Caller->AssignCommand("Renfort_SPVLUP");
		Caller->EnableCommand("Renfort_SPVLUP", true);
		Caller->AssignCommand("Renfort_SPVLgolf");
		Caller->EnableCommand("Renfort_SPVLgolf", true);
		Caller->AssignCommand("COSMenu");
		Caller->EnableCommand("COSMenu", true);
	}
};

object COSMenu : CommandScript
{
 	COSMenu()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->EnableCommand("COSDepartCS", true);
		Caller->EnableCommand("COSSAP", true);
		Caller->EnableCommand("COSINC", true);
		Caller->EnableCommand("COSDIV", true);
		Caller->EnableCommand("COSSPE", true);
		Caller->EnableCommand("COSGOC", true);
		Caller->EnableCommand("COSFDF", true);

		if (StrCompare(Caller->GetPrototypeFileName(), OBJ_COS) == 0)
		{
			Caller->EnableCommand("MoveTo", true);
			Caller->EnableCommand("EnterCar", true);
			Caller->EnableCommand("Init_CSLAND", true);
			Caller->EnableCommand("Init_CSBITCHE", true);
			Caller->EnableCommand("Init_CSGRENELLE", true);
		}
	}
};

object COSMenuPol : CommandScript
{
 	COSMenuPol()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->EnableCommand("COSPN", true);
		Caller->EnableCommand("COSBAC", true);
		Caller->EnableCommand("COSBRI", true);
		Caller->EnableCommand("COSCRS", true);
		Caller->EnableCommand("COSGN", true);
		/*Caller->EnableCommand("COSGM", true);*/
		
		Caller->EnableCommand("MoveTo", true);
		Caller->EnableCommand("EnterCar", true);
		
		Caller->EnableCommand("Renfort_PNDEMINAGE", true);
		Caller->EnableCommand("Renfort_Fuite", true);

	}
};

object COSBAC : CommandScript
{
 	COSBAC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosbac");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_BAC207SW");
		Caller->EnableCommand("Renfort_BAC207SW", true);
		Caller->AssignCommand("Renfort_BACC4");
		Caller->EnableCommand("Renfort_BACC4", true);
		Caller->AssignCommand("Renfort_BAC75N2");
		Caller->EnableCommand("Renfort_BAC75N2", true);
		Caller->AssignCommand("Renfort_MONDEO75N");
		Caller->EnableCommand("Renfort_MONDEO75N", true);
		Caller->AssignCommand("Renfort_BAC208");
		Caller->EnableCommand("Renfort_BAC208", true);
		Caller->AssignCommand("Renfort_BACC3");
		Caller->EnableCommand("Renfort_BACC3", true);
		Caller->AssignCommand("Renfort_BACFiesta");
		Caller->EnableCommand("Renfort_BACFiesta", true);
		Caller->AssignCommand("Renfort_BACFocus");
		Caller->EnableCommand("Renfort_BACFocus", true);
		Caller->AssignCommand("Renfort_BACSkoda");
		Caller->EnableCommand("Renfort_BACSkoda", true);
		Caller->AssignCommand("Renfort_BACFluence");
		Caller->EnableCommand("Renfort_BACFluence", true);
		Caller->AssignCommand("Renfort_BACCaptur");
		Caller->EnableCommand("Renfort_BACCaptur", true);
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSPN : CommandScript
{
 	COSPN()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cospn");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_PNMASTER");
		Caller->EnableCommand("Renfort_PNMASTER", true);
		Caller->AssignCommand("Renfort_PNMASTER2");
		Caller->EnableCommand("Renfort_PNMASTER2", true);
		Caller->AssignCommand("Renfort_PNMASTER3");
		Caller->EnableCommand("Renfort_PNMASTER3", true);
		Caller->AssignCommand("Renfort_PNMASTER4");
		Caller->EnableCommand("Renfort_PNMASTER4", true);
		Caller->AssignCommand("Renfort_PNSCENIC");
		Caller->EnableCommand("Renfort_PNSCENIC", true);
		Caller->AssignCommand("Renfort_PN308");
		Caller->EnableCommand("Renfort_PN308", true);
		Caller->AssignCommand("Renfort_PNBerlingo");
		Caller->EnableCommand("Renfort_PNBerlingo", true);
		/*Caller->AssignCommand("Renfort_PNBerlingoPMV");
		Caller->EnableCommand("Renfort_PNBerlingoPMV", true);*/
		Caller->AssignCommand("Renfort_PNMASTERVTD");
		Caller->EnableCommand("Renfort_PNMASTERVTD", true);
		Caller->AssignCommand("Renfort_PNMOTO");
		Caller->EnableCommand("Renfort_PNMOTO", true);
		/*Caller->AssignCommand("Renfort_PNEstate");
		Caller->EnableCommand("Renfort_PNEstate", true);*/
		Caller->AssignCommand("Renfort_PNC8");
		Caller->EnableCommand("Renfort_PNC8", true);
		/*Caller->AssignCommand("Renfort_PNTRAFIC");
		Caller->EnableCommand("Renfort_PNTRAFIC", true);
		Caller->AssignCommand("Renfort_PNTRAFIC2");
		Caller->EnableCommand("Renfort_PNTRAFIC2", true);
		Caller->AssignCommand("Renfort_PNTRAFICPMV");
		Caller->EnableCommand("Renfort_PNTRAFICPMV", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSBRI : CommandScript
{
 	COSBRI()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosbri");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_308GIGN");
		Caller->EnableCommand("Renfort_308GIGN", true);
		Caller->AssignCommand("Renfort_ESPACEGIGN");
		Caller->EnableCommand("Renfort_ESPACEGIGN", true);
		Caller->AssignCommand("Renfort_EXPERTGIGN");
		Caller->EnableCommand("Renfort_EXPERTGIGN", true);
		Caller->AssignCommand("Renfort_C8GIGN");
		Caller->EnableCommand("Renfort_C8GIGN", true);
		Caller->AssignCommand("Renfort_GIGN");
		Caller->EnableCommand("Renfort_GIGN", true);
		Caller->AssignCommand("Renfort_GIGN2");
		Caller->EnableCommand("Renfort_GIGN2", true);
		Caller->AssignCommand("Renfort_MASTERGIGN");
		Caller->EnableCommand("Renfort_MASTERGIGN", true);
		/*Caller->AssignCommand("Renfort_TITUSGIGN");
		Caller->EnableCommand("Renfort_TITUSGIGN", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSCRS : CommandScript
{
 	COSCRS()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("coscrs");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_MASTERCRS");
		Caller->EnableCommand("Renfort_MASTERCRS", true);
		Caller->AssignCommand("Renfort_TRANSITCRS");
		Caller->EnableCommand("Renfort_TRANSITCRS", true);
		Caller->AssignCommand("Renfort_BUSCRS");
		Caller->EnableCommand("Renfort_BUSCRS", true);
		Caller->AssignCommand("Renfort_CANONCRS");
		Caller->EnableCommand("Renfort_CANONCRS", true);
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSGN : CommandScript
{
 	COSGN()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgn");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_GNC4");
		Caller->EnableCommand("Renfort_GNC4", true);
		/*Caller->AssignCommand("Renfort_GNC4_2");
		Caller->EnableCommand("Renfort_GNC4_2", true);
		Caller->AssignCommand("Renfort_GNESTATE");
		Caller->EnableCommand("Renfort_GNESTATE", true);*/
		Caller->AssignCommand("Renfort_GNMOTO");
		Caller->EnableCommand("Renfort_GNMOTO", true);
		/*Caller->AssignCommand("Renfort_GNKANGOO");
		Caller->EnableCommand("Renfort_GNKANGOO", true);
		Caller->AssignCommand("Renfort_GNKANGOO2");
		Caller->EnableCommand("Renfort_GNKANGOO2", true);
		Caller->AssignCommand("Renfort_GNKANGOOCYNO");
		Caller->EnableCommand("Renfort_GNKANGOOCYNO", true);
		Caller->AssignCommand("Renfort_GNEXPERT");
		Caller->EnableCommand("Renfort_GNEXPERT", true);
		Caller->AssignCommand("Renfort_GNC8");
		Caller->EnableCommand("Renfort_GNC8", true);
		Caller->AssignCommand("Renfort_GN3008");
		Caller->EnableCommand("Renfort_GN3008", true);
		Caller->AssignCommand("Renfort_GNBIPPER");
		Caller->EnableCommand("Renfort_GNBIPPER", true);
		Caller->AssignCommand("Renfort_GNDUSTER");
		Caller->EnableCommand("Renfort_GNDUSTER", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSGM : CommandScript
{
 	COSGM()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosgm");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		/*Caller->AssignCommand("Renfort_GNBUS");
		Caller->EnableCommand("Renfort_GNBUS", true);
		Caller->AssignCommand("Renfort_GNIVECO");
		Caller->EnableCommand("Renfort_GNIVECO", true);
		Caller->AssignCommand("Renfort_GNIVECO2");
		Caller->EnableCommand("Renfort_GNIVECO2", true);
		Caller->AssignCommand("Renfort_GNIVECO3");
		Caller->EnableCommand("Renfort_GNIVECO3", true);
		Caller->AssignCommand("Renfort_GNVRBG");
		Caller->EnableCommand("Renfort_GNVRBG", true);*/
		Caller->AssignCommand("COSMenuPol");
		Caller->EnableCommand("COSMenuPol", true);
	}
};

object COSSAMU : CommandScript
{
 	COSSAMU()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_UMHMASTER");
		Caller->EnableCommand("Renfort_UMHMASTER", true);
		Caller->AssignCommand("Renfort_UMHSPRINTER");
		Caller->EnableCommand("Renfort_UMHSPRINTER", true);
		Caller->AssignCommand("Renfort_VLMKANGOO");
		Caller->EnableCommand("Renfort_VLMKANGOO", true);
		Caller->AssignCommand("Renfort_VLMVITO");
		Caller->EnableCommand("Renfort_VLMVITO", true);
		Caller->AssignCommand("Renfort_PCMSAMU");
		Caller->EnableCommand("Renfort_PCMSAMU", true);
	}
};

object COSTEC : CommandScript
{
 	COSTEC()
 	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("cosmenu");
 	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
		return true;
 	}
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
		return true;
 	}
 
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->DisableAllCommands();
		Caller->AssignCommand("Renfort_GRUE");
		Caller->EnableCommand("Renfort_GRUE", true);
		Caller->AssignCommand("Renfort_DEPAN");
		Caller->EnableCommand("Renfort_DEPAN", true);
		Caller->AssignCommand("Renfort_EDF");
		Caller->EnableCommand("Renfort_EDF", true);
		Caller->AssignCommand("Renfort_GDF");
		Caller->EnableCommand("Renfort_GDF", true);
	}
};
