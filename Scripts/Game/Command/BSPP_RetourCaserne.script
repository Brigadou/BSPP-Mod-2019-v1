//******************************************************************************************
//
//		Script Retour Caserne BSPP
//		Edité par Superjajaman75 pour MOD BSPP
//		Reproduction autorisé avec conservation crédit
//
//******************************************************************************************

const char CMD_AUTOSIREN_OFF[]			= "VcmdAutoSirenOff";
const char CMD_WARNINGLIGHTS[] 			= "VcmdWarningLightsOn";
const char DUMMY_WARNINGLIGHTS[]		= "DummyHasWarningLights";
const char CMD_FLOODLIGHTS_OFF[] 		= "VcmdFloodLightsOff";
const char CMD_FLOODLIGHTS_ON[] 		= "VcmdFloodLightsOn";
const char CMD_FLASHINGLIGHTS[] 		= "Gyro_Off";
const char CMD_TOHOSPITAL[] 			= "VcmdToHospital";
	
const char DUMMY_DISABLE[] 				= "DummyDisableSiren";
const char DUMMY_HASSIREN[] 			= "DummyHasSiren";
const char DUMMY_PATROL[] 				= "DummyPatrol";
const char DUMMY_FIRESTATION[]			= "DummyAtFireStation";
const char DUMMY_CHECKPARKED[] 			= "DummyCheckParked";
	
//VO
const char VO_SPAWN_EM[]				= "VO_SPAWN_EM";
const char VO_SPAWN_BITCHE[]			= "VO_SPAWN_BITCHE";
const char VO_SPAWN_GRENELLE[]			= "VO_SPAWN_GRENELLE";

const char VO_SPAWN_TEC[]				= "VO_SPAWN_TEC";
const char VO_SPAWN_SAMU[]				= "VO_SPAWN_SAMU";


const char VO_SQUAD_EM[] 				= "VO_SQUAD_EM";
const char VO_SQUAD_BITCHE[] 			= "VO_SQUAD_BITCHE";
const char VO_SQUAD_GRENELLE[] 			= "VO_SQUAD_GRENELLE";

const char VO_SQUAD_SAMU[]				= "VO_SQUAD_SAMU";
const char VO_SQUAD_TEC[]				= "VO_SQUAD_TEC";


// Déclarations de véhicules de Pompiers
const char PROTO_VLROGC[] 				= "mod:Prototypes/Vehicles/Fire Department/VLROGC.e4p";
const char PROTO_VLRCGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VLRCGI.e4p";
const char PROTO_VLROPC[] 				= "mod:Prototypes/Vehicles/Fire Department/VLROPC.e4p";
const char PROTO_VPC[] 					= "mod:Prototypes/Vehicles/Fire Department/VPC.e4p";

const char PROTO_CA[] 					= "mod:Prototypes/Vehicles/Fire Department/CA.e4p";
const char PROTO_FPTMidlum[]			= "mod:Prototypes/Vehicles/Fire Department/FPTmidlum.e4p";
const char PROTO_FPTAtego[]				= "mod:Prototypes/Vehicles/Fire Department/FPTatego.e4p";
const char PROTO_FM[]					= "mod:Prototypes/Vehicles/Fire Department/FM.e4p";
const char PROTO_FA[]					= "mod:Prototypes/Vehicles/Fire Department/FA.e4p";
const char PROTO_PST[] 					= "mod:Prototypes/Vehicles/Fire Department/PST.e4p";
const char PROTO_FPTL[] 				= "mod:Prototypes/Vehicles/Fire Department/FPTL.e4p";
const char PROTO_PSE2[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE2.e4p";
const char PROTO_PSE3[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE3.e4p";
const char PROTO_PSE4[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE4.e4p";
const char PROTO_PSE5[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE5.e4p";
const char PROTO_CCR[]					= "mod:Prototypes/Vehicles/Fire Department/CCR.e4p";
const char PROTO_VIVP[]					= "mod:Prototypes/Vehicles/Fire Department/VIVP.e4p";

const char PROTO_BEAA[] 				= "mod:Prototypes/Vehicles/Fire Department/BEAA.e4p";
const char PROTO_EPAAtego[] 			= "mod:Prototypes/Vehicles/Fire Department/EPA_atego.e4p";
const char PROTO_EPAIveco[]				= "mod:Prototypes/Vehicles/Fire Department/EPA_iveco.e4p";

const char PROTO_VPS[] 					= "mod:Prototypes/Vehicles/Fire Department/VPS.e4p";
const char PROTO_VLRVETO[] 				= "mod:Prototypes/Vehicles/Fire Department/VLRVETO.e4p";
const char PROTO_VSC[] 					= "mod:Prototypes/Vehicles/Fire Department/VSC.e4p";
const char PROTO_VEC[] 					= "mod:Prototypes/Vehicles/Fire Department/VEC.e4p";
const char PROTO_VSTI[] 				= "mod:Prototypes/Vehicles/Fire Department/VSTI.e4p";
const char PROTO_VPB[] 					= "mod:Prototypes/Vehicles/Fire Department/VPB.e4p";
const char PROTO_VE2I[] 				= "mod:Prototypes/Vehicles/Fire Department/VE2I.e4p";
const char PROTO_ELI[] 					= "mod:Prototypes/Vehicles/Fire Department/ELI.e4p";
const char PROTO_VIMP[] 				= "mod:Prototypes/Vehicles/Fire Department/VIMP.e4p";
const char PROTO_VAG[] 					= "mod:Prototypes/Vehicles/Fire Department/VAG.e4p";
const char PROTO_PEV[]					= "mod:Prototypes/Vehicles/Fire Department/PEV.e4p";
const char PROTO_PRM[]					= "mod:Prototypes/Vehicles/Fire Department/PRM.e4p";
const char PROTO_CRAC[] 				= "mod:Prototypes/Vehicles/Fire Department/CRAC.e4p";
const char PROTO_CESD[]					= "mod:Prototypes/Vehicles/Fire Department/CESD.e4p";
const char PROTO_CD[]					= "mod:Prototypes/Vehicles/Fire Department/CD.e4p";
const char PROTO_VELD[]					= "mod:Prototypes/Vehicles/Fire Department/VELD.e4p";
const char PROTO_CTGI[]					= "mod:Prototypes/Vehicles/Fire Department/CTGI.e4p";

const char PROTO_VIGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VIGI.e4p";
const char PROTO_VID[] 					= "mod:Prototypes/Vehicles/Fire Department/VID.e4p";
const char PROTO_VID2[] 				= "mod:Prototypes/Vehicles/Fire Department/VID2.e4p";
const char PROTO_VID3[] 				= "mod:Prototypes/Vehicles/Fire Department/VID3.e4p";

const char PROTO_SPVL308[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVL308.e4p";
const char PROTO_SPVLUP[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVLup.e4p";
const char PROTO_SPVLgolf[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLgolf.e4p";
const char PROTO_SPVLclio3[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio3.e4p";
const char PROTO_SPVLclio4[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio4.e4p";
const char PROTO_SPVLkangoo[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLkangoo.e4p";
const char PROTO_SPVLmegane[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLmegane.e4p";

const char PROTO_VDIP[] 				= "mod:Prototypes/Vehicles/Fire Department/VDIP.e4p";
const char PROTO_VANRBC[] 				= "mod:Prototypes/Vehicles/Fire Department/VANRBC.e4p";
const char PROTO_CICCIB[] 				= "mod:Prototypes/Vehicles/Fire Department/NRBC.e4p";
const char PROTO_CICCRR[]				= "mod:Prototypes/Vehicles/Fire Department/CICCRR.e4p";

const char PROTO_SIS[] 					= "mod:Prototypes/Vehicles/Fire Department/SIS.e4p";
const char PROTO_SIS2[] 				= "mod:Prototypes/Vehicles/Fire Department/SIS2.e4p";
const char PROTO_CSP[] 					= "mod:Prototypes/Vehicles/Fire Department/CSP.e4p";
const char PROTO_SPTT[] 				= "mod:Prototypes/Vehicles/Fire Department/SPTT.e4p";

const char PROTO_VTP[] 					= "mod:Prototypes/Vehicles/Fire Department/VTP.e4p";



// Déclarations de véhicules du ambulances
const char PROTO_PCMSAMU[] 				= "mod:Prototypes/Vehicles/Ambulance/SAMU_PCM_master.e4p";

const char PROTO_UMHMASTER[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_UMH_master.e4p";
const char PROTO_UMHSPRINTER[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_UMH_sprinter.e4p";
const char PROTO_VLMKANGOO[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_VLM_kangoo.e4p";
const char PROTO_VLMVITO[] 			= "mod:Prototypes/Vehicles/Ambulance/SAMU_VLM_vito.e4p";

const char PROTO_CMO[] 					= "mod:Prototypes/Vehicles/Ambulance/CMO.e4p";
const char PROTO_VPCM[] 				= "mod:Prototypes/Vehicles/Ambulance/VPCM.e4p";
const char PROTO_VLRDSM[] 				= "mod:Prototypes/Vehicles/Ambulance/VLRDSM.e4p";

const char PROTO_VSAVB[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVb.e4p";
const char PROTO_VSAVR[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVr.e4p";
const char PROTO_PSR[] 					= "mod:Prototypes/Vehicles/Ambulance/PSR.e4p";
const char PROTO_ARIveco[] 				= "mod:Prototypes/Vehicles/Ambulance/ARiveco.e4p";
const char PROTO_ARMaster[] 			= "mod:Prototypes/Vehicles/Ambulance/ARmaster.e4p";
const char PROTO_ARDucato[] 			= "mod:Prototypes/Vehicles/Ambulance/ARducato.e4p";
const char PROTO_VES[] 					= "mod:Prototypes/Vehicles/Ambulance/VES.e4p";
const char PROTO_VAS[] 					= "mod:Prototypes/Vehicles/Ambulance/VAS.e4p";
const char PROTO_VRCP[] 				= "mod:Prototypes/Vehicles/Ambulance/VRCP.e4p";
const char PROTO_VRM[] 					= "mod:Prototypes/Vehicles/Ambulance/VRM.e4p";
const char PROTO_VRSD[] 				= "mod:Prototypes/Vehicles/Ambulance/VRSD.e4p";

const char PROTO_PFG[] 					= "mod:Prototypes/Vehicles/Ambulance/PFG.e4p";

const char PROTO_VLRVETO[] 				= "mod:Prototypes/Vehicles/Ambulance/VLRVETO.e4p";
const char PROTO_VSC[] 					= "mod:Prototypes/Vehicles/Ambulance/VSC.e4p";
const char PROTO_VEC[] 					= "mod:Prototypes/Vehicles/Ambulance/VEC.e4p";

const char PROTO_ADPC308[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_308.e4p";
const char PROTO_ADPC_Master[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_cube.e4p";
const char PROTO_ADPC_Master_2[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_2.e4p";
const char PROTO_ADPC_Master_3[] 			= "mod:Prototypes/Vehicles/Ambulance/ADPC_master_3.e4p";


// Déclarations de véhicules de la police

const char PROTO_MASTERPN[]				= "mod:Prototypes/Vehicles/Police/pn_master.e4p";
const char PROTO_MASTERPN2[]			= "mod:Prototypes/Vehicles/Police/pn_master2.e4p";
const char PROTO_MASTERPN3[]			= "mod:Prototypes/Vehicles/Police/pn_master3.e4p";
const char PROTO_MASTERPN4[]			= "mod:Prototypes/Vehicles/Police/pn_master_pmv.e4p";
const char PROTO_SCENIC[]				= "mod:Prototypes/Vehicles/Police/pn_scenic.e4p";
const char PROTO_308PN[]				= "mod:Prototypes/Vehicles/Police/pn_308.e4p";
const char PROTO_BERLINGOPN[]			= "mod:Prototypes/Vehicles/Police/pn_berlingo.e4p";
const char PROTO_BERLINGOPNPMV[]		= "mod:Prototypes/Vehicles/Police/pn_berlingo_pmv.e4p";
const char PROTO_MASTERVTD[]			= "mod:Prototypes/Vehicles/Police/pn_vtd_master.e4p";
const char PROTO_DEMINAGE[]				= "mod:Prototypes/Vehicles/Police/pn_deminage_master.e4p";
const char PROTO_MOTOPN[]				= "mod:Prototypes/Vehicles/Police/pn_moto.e4p";
const char PROTO_ESTATEPN[]				= "mod:Prototypes/Vehicles/Police/pn_estate.e4p";
const char PROTO_C8PN[]					= "mod:Prototypes/Vehicles/Police/pn_c8.e4p";
const char PROTO_TRAFICPN[]				= "mod:Prototypes/Vehicles/Police/pn_trafic.e4p";
const char PROTO_TRAFICPN2[]			= "mod:Prototypes/Vehicles/Police/pn_trafic2.e4p";
const char PROTO_TRAFICPNPMV[]			= "mod:Prototypes/Vehicles/Police/pn_trafic_pmv.e4p";

const char PROTO_BAC207SW[]				= "mod:Prototypes/Vehicles/Police/bac_207sw.e4p";
const char PROTO_BACC4[]				= "mod:Prototypes/Vehicles/Police/bac_c4.e4p";
const char PROTO_BAC75N2[]				= "mod:Prototypes/Vehicles/Police/bac_75n2.e4p";
const char PROTO_MONDEO75N[]			= "mod:Prototypes/Vehicles/Police/75n_mondeo.e4p";
const char PROTO_BAC208[]				= "mod:Prototypes/Vehicles/Police/bac_208.e4p";
const char PROTO_BACC3[]				= "mod:Prototypes/Vehicles/Police/bac_c3.e4p";
const char PROTO_BACFIESTA[]			= "mod:Prototypes/Vehicles/Police/bac_fiesta.e4p";
const char PROTO_BACFOCUS[]				= "mod:Prototypes/Vehicles/Police/bac_focus.e4p";
const char PROTO_BACSKODA[]				= "mod:Prototypes/Vehicles/Police/bac_skoda.e4p";

const char PROTO_308GIGN[]				= "mod:Prototypes/Vehicles/Police/gign_308.e4p";
const char PROTO_ESPACEGIGN[]			= "mod:Prototypes/Vehicles/Police/gign_espace.e4p";
const char PROTO_EXPERTGIGN[]			= "mod:Prototypes/Vehicles/Police/gign_expert.e4p";
const char PROTO_C8GIGN[]				= "mod:Prototypes/Vehicles/Police/gign_c8.e4p";
const char PROTO_GIGN[]					= "mod:Prototypes/Vehicles/Police/gign.e4p";
const char PROTO_GIGN2[]				= "mod:Prototypes/Vehicles/Police/gign2.e4p";
const char PROTO_MASTERGIGN[]			= "mod:Prototypes/Vehicles/Police/gign_master.e4p";
const char PROTO_TITUSGIGN[]			= "mod:Prototypes/Vehicles/Police/gign_titus.e4p";

const char PROTO_MASTERCRS[]			= "mod:Prototypes/Vehicles/Police/crs_master.e4p";
const char PROTO_TRANSITCRS[]			= "mod:Prototypes/Vehicles/Police/crs_transit.e4p";
const char PROTO_BUSCRS[]				= "mod:Prototypes/Vehicles/Police/crs_bus.e4p";
const char PROTO_CANONCRS[]				= "mod:Prototypes/Vehicles/Police/crs_canon.e4p";

const char PROTO_GNC4[]					= "mod:Prototypes/Vehicles/Police/gn_c4.e4p";
const char PROTO_GNC4_2[]				= "mod:Prototypes/Vehicles/Police/gn_c4_2.e4p";
const char PROTO_GNESTATE[]				= "mod:Prototypes/Vehicles/Police/gn_estate.e4p";
const char PROTO_GNMOTO[]				= "mod:Prototypes/Vehicles/Police/gn_moto.e4p";
const char PROTO_GNKANGOO[]				= "mod:Prototypes/Vehicles/Police/gn_kangoo.e4p";
const char PROTO_GNKANGOO2[]			= "mod:Prototypes/Vehicles/Police/gn_kangoo2.e4p";
const char PROTO_GNKANGOOCYNO[]			= "mod:Prototypes/Vehicles/Police/gn_kangoo_cyno.e4p";
const char PROTO_GNEXPERT[]				= "mod:Prototypes/Vehicles/Police/gn_expert.e4p";
const char PROTO_GNBERLINGO[]			= "mod:Prototypes/Vehicles/Police/gn_berlingo.e4p";
const char PROTO_GNC8[]					= "mod:Prototypes/Vehicles/Police/gn_c8.e4p";
const char PROTO_GNBUS[]				= "mod:Prototypes/Vehicles/Police/gn_pr10s.e4p";
const char PROTO_GN3008[]				= "mod:Prototypes/Vehicles/Police/gn_3008.e4p";
const char PROTO_GNBIPPER[]				= "mod:Prototypes/Vehicles/Police/gn_bipper.e4p";
const char PROTO_GNDUSTER[]				= "mod:Prototypes/Vehicles/Police/gn_duster.e4p";
const char PROTO_GNIVECO[]				= "mod:Prototypes/Vehicles/Police/gn_iveco.e4p";
const char PROTO_GNIVECO2[]				= "mod:Prototypes/Vehicles/Police/gn_iveco2.e4p";
const char PROTO_GNIVECO3[]				= "mod:Prototypes/Vehicles/Police/gn_iveco3.e4p";
const char PROTO_GNVBRG[]				= "mod:Prototypes/Vehicles/Police/gn_vbrg.e4p";

const char PROTO_GETAWAY[]				= "mod:Prototypes/Vehicles/Police/getawaycar.e4p";

// Déclarations de véhicules des Services Techniques
const char PROTO_DEP[] 					= "mod:Prototypes/Vehicles/TEC/depanneuse.e4p";
const char PROTO_ERDF[] 			= "mod:Prototypes/Vehicles/TEC/erdf_kangoo.e4p";
const char PROTO_GRDF[] 			= "mod:Prototypes/Vehicles/TEC/grdf_trafic.e4p";
const char PROTO_GRUE[] 				= "mod:Prototypes/Vehicles/Sonstiges/Kran.e4p";

	
const char SND_TOSTATION2[]				= "mod:Audio/FX/radio/ccgc.wav";
const char SND_TOSTATION3[]				= "mod:Audio/FX/radio/ccrm.wav";
const char SND_TOSTATION4[]				= "mod:Audio/FX/radio/epa.wav";
const char SND_TOSTATION5[]				= "mod:Audio/FX/radio/fc.wav";
const char SND_TOSTATION6[]				= "mod:Audio/FX/radio/FPTAtego.wav";
const char SND_TOSTATION7[]				= "mod:Audio/FX/radio/FPTMidlum.wav";	
const char SND_TOSTATION8[]				= "mod:Audio/FX/radio/vlc.wav";
const char SND_TOSTATION9[]				= "mod:Audio/FX/radio/vli.wav";
const char SND_TOSTATION10[]			= "mod:Audio/FX/radio/vpc.wav";
const char SND_TOSTATION11[]			= "mod:Audio/FX/radio/vpl.wav";
const char SND_TOSTATION12[]			= "mod:Audio/FX/radio/vrch.wav";
const char SND_TOSTATION13[]			= "mod:Audio/FX/radio/vsav1.wav";
const char SND_TOSTATION14[]			= "mod:Audio/FX/radio/vsav2.wav";
const char SND_TOSTATION15[]			= "mod:Audio/FX/radio/PSR.wav";
const char SND_TOSTATION16[]			= "mod:Audio/FX/radio/vsr.wav";
const char SND_TOSTATION17[]			= "mod:Audio/FX/radio/emod.wav";
const char SND_TOSTATION18[]			= "mod:Audio/FX/radio/cdhr.wav";
const char SND_TOSTATION19[]			= "mod:Audio/FX/radio/ccf.wav";
const char SND_TOSTATION20[]			= "mod:Audio/FX/radio/vtu.wav";
const char SND_TOSTATION21[]			= "mod:Audio/FX/radio/pma.wav";
const char SND_TOSTATION22[]			= "mod:Audio/FX/radio/umh.wav";
const char SND_TOSTATION23[]			= "mod:Audio/FX/radio/vlm.wav";
	
const char HINT_NOTVALID[] 				= "Ce vehicule ne fait pas partie de la caserne, il rentre a la base!";
const char HINT_NOSPACE[] 				= "Pas de place a la caserne, le vehicule retourne a la base!";
const char HINT_NOSPACE_AMBULANCE[] 	= "Pas de place a la caserne, le vehicule part en patrouille!";
const char HINT_TRANSPORTS[] 			= "Le vehicule transporte une victime, il va a l'hopital en premier!";
const char HINT_ERREUR[] 				= "Erreur";


int DummyGroup = 32;

object VcmdToFireStation : CommandScript
{
	VcmdToFireStation()
	{
		SetCursor("tofirestation");
		SetIcon("tofirestation");
		SetGroupID(DummyGroup);
 		SetGroupLeader(true);
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid())
			return false;

 		Vehicle v(Caller);
		if (!v.HasCommand("MoveTo"))
			return false;
		if(v.IsInstalled())
			return false;
		if (v.HasCommand("DummyWaterSupplyOn") || v.HasCommand("DummyWaterSupplyFromTankerOn"))
			return false;
		if (Game::IsCampaign() || Game::IsMission())
			return false;
			
		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || (Caller->GetID() != Target->GetID()))
			return false;
			
		return true;
	}

	void FirstReturnParking(GameObject *Caller, char NAME[], char SQUAD[], char PROTO[], char ROTATION[], const char sons[])
	{
		Vehicle v(Caller);
		int soundID;
		
		if (StrCompare(NAME, "") == 0) {
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		if (v.GetVehicleType() == VT_AMBULANCE_RTW && v.GetNumTransported() > 0)
		{
			v.PushActionExecuteCommand(ACTION_NEWLIST, CMD_TOHOSPITAL, Caller, 0, false);
			Mission::PlayHint(HINT_TRANSPORTS);
			return;
		}
		if (v.IsBlueLightEnabled())
			Game::ExecuteCommand(CMD_FLASHINGLIGHTS, &v, &v);

		if (v.HasCommand(DUMMY_WARNINGLIGHTS))
		{
			v.EnableBlinker(BLT_NONE);
			v.RemoveCommand(DUMMY_WARNINGLIGHTS);
			v.AssignCommand(CMD_WARNINGLIGHTS);
		}
		if (v.HasCommand(CMD_FLOODLIGHTS_OFF))
		{
			v.EnableSpecialLights(false);
			v.RemoveCommand(CMD_FLOODLIGHTS_OFF);
			v.AssignCommand(CMD_FLOODLIGHTS_ON);
		}
		if (v.HasObjectPath(NULL))
			Game::ExecuteCommand(DUMMY_PATROL, &v, &v);
		if (v.HasCommand(DUMMY_HASSIREN) && v.HasCommand(CMD_AUTOSIREN_OFF))
			Game::ExecuteCommand(DUMMY_DISABLE, &v, &v);
		
		GameObjectList vehList(NAME);
		GameObject maker;
		if (vehList.GetNumObjects() == 1)
		{
			System::Log("[CASERNE] veh trouve");
			maker = vehList.GetObject(0);
			if (maker.GetPlayerMP() == Caller->GetPlayerMP())
				System::Log("[CASERNE] veh true");				
		} else {
			System::Log("[CASERNE] veh non trouve");
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		if (StrCompare(sons, "") != 0)
		{
			soundID = Audio::PlaySample3D(sons, Caller->GetPosition());
			v.AttachSound(soundID);
		}
		
		GameObjectList l1;
 		Game::CollectObstaclesOnVirtualObject(SQUAD, l1, ACTOR_VEHICLE);
		for (int i = 0; i < l1.GetNumObjects(); i++)
		{
			GameObject *veh = l1.GetObject(i);
			if(StrCompare(veh->GetPrototypeFileName(), PROTO) == 0) {
				Mission::PlayHint(HINT_NOSPACE);
				v.PushActionReturnToBase(ACTION_NEWLIST);
				return;
			}
		}
		
		ActorList la1 = Game::GetActors(ROTATION);
		if(la1.GetNumActors() > 0)
			Vector FirstPoint = la1.GetActor(0)->GetPosition();
		
		v.PushActionMove(ACTION_NEWLIST, FirstPoint);
		v.PushActionWait(ACTION_APPEND, 1.0f);
		v.PushActionExecuteCommand(ACTION_APPEND, DUMMY_CHECKPARKED, Caller, 0, false);
		
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Vehicle v(Caller);
		//VSAV B 1 CS EM
		//VSAV B 2 CS EM
		//VSAV B 3 CS GRENELLE
		//Les deux premiers VSAV étant sur le meme squad, on appelle la fonction FirstReturnParking avec la place au lieu du squad
		if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVB) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			int vsavEM = 0;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
					vsavEM++;
				}
				
			}

			//Si les deux places sont libres
			if (vsavEM == 0) {
				FirstReturnParking(Caller, "VSAV_B_1", "", PROTO_VSAVB, "VO_VSAV_B_1_R", "");
				return;
			}
			//Si VSAV2 est libre et VSAV1 occupé
			else if (vsavEM == 1) {
				FirstReturnParking(Caller, "VSAV_B_2", "", PROTO_VSAVB, "VO_VSAV_B_2_R", "");
				return;
			} 
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_B_3", VO_SQUAD_GRENELLE, PROTO_VSAVB, "VO_VSAV_B_3_R", ""); 
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		//VSAV R 1 CS EM
		//VSAV R 2 CS BITCHE
		//VSAV R 3 CS GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVR) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_1", VO_SQUAD_EM, PROTO_VSAVR, "VO_VSAV_R_1_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_2", VO_SQUAD_BITCHE, PROTO_VSAVR, "VO_VSAV_R_2_R", ""); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_3", VO_SQUAD_GRENELLE, PROTO_VSAVR, "VO_VSAV_R_3_R", ""); 
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		//VID		CS EM
		//VID_2		CS BITCHE
		//VID_3		CS GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VID) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VID", VO_SQUAD_EM, PROTO_VID, "VO_VID_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VID_2", VO_SQUAD_BITCHE, PROTO_VID, "VO_VID_2_R", ""); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			if (!exitLoop) {
				FirstReturnParking(Caller, "VID_3", VO_SQUAD_GRENELLE, PROTO_VID, "VO_VID_3_R", ""); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}

		
		//PS5			EM
		//PS5_2			BITCHE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE5) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "PS5", VO_SQUAD_EM, PROTO_PSE5, "VO_PS5_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "PS5_2", VO_SQUAD_BITCHE, PROTO_PSE5, "VO_PS5_2_R", ""); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		//PS4			BITCHE
		//PS4_2			GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE4) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "PS4", VO_SQUAD_BITCHE, PROTO_PSE4, "VO_PS4_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "PS4_2", VO_SQUAD_GRENELLE, PROTO_PSE4, "VO_PS4_2_R", ""); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		//EPAN_ATEGO	BITCHE
		//EPAN_ATEGO_2	GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_EPAAtego) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "EPAN_Atego", VO_SQUAD_BITCHE, PROTO_EPAAtego, "VO_EPAN_Atego_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "EPAN_Atego_2", VO_SQUAD_GRENELLE, PROTO_EPAAtego, "VO_EPAN_Atego_2_R", ""); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ADPC_Master) == 0)
		{
			FirstReturnParking(Caller, "MasterPC", VO_SQUAD_EM, PROTO_ADPC_Master, "VO_MasterPC_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ARIveco) == 0)
		{
			FirstReturnParking(Caller, "AR_Iveco", VO_SQUAD_EM, PROTO_ARIveco, "VO_AR_Iveco_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ARMaster) == 0)
		{
			FirstReturnParking(Caller, "AR_Master", VO_SQUAD_EM, PROTO_ARMaster, "VO_AR_Master_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_FPTMidlum) == 0)
		{
			FirstReturnParking(Caller, "FPT_Midlum", VO_SQUAD_EM, PROTO_FPTMidlum, "VO_FPT_Midlum_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CA) == 0)
		{
			FirstReturnParking(Caller, "CA", VO_SQUAD_EM, PROTO_CA, "VO_CA_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD) == 0)
		{
			FirstReturnParking(Caller, "CD", VO_SQUAD_EM, PROTO_CD, "VO_CD_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CESD) == 0)
		{
			FirstReturnParking(Caller, "CESD", VO_SQUAD_EM, PROTO_CESD, "VO_CESD_R", "");
		}
		/*else if(StrCompare(v.GetPrototypeFileName(), PROTO_CMO) == 0)
		{
			FirstReturnParking(Caller, "CMO", VO_SQUAD_EM, PROTO_CMO, "", "");
		}*/
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_EPAIveco) == 0)
		{
			FirstReturnParking(Caller, "EPAN_Iveco", VO_SQUAD_EM, PROTO_EPAIveco, "VO_EPAN_Iveco_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PEV) == 0)
		{
			FirstReturnParking(Caller, "PEV", VO_SQUAD_EM, PROTO_PEV, "VO_PEV_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE3) == 0)
		{
			FirstReturnParking(Caller, "PS3", VO_SQUAD_EM, PROTO_PSE3, "VO_PS3_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVL308) == 0)
		{
			FirstReturnParking(Caller, "SPVL_308", VO_SQUAD_EM, PROTO_SPVL308, "VO_SPVL_308_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLkangoo) == 0)
		{
			FirstReturnParking(Caller, "SPVL_Kangoo", VO_SQUAD_EM, PROTO_SPVLkangoo, "VO_SPVL_Kangoo_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VIGI) == 0)
		{
			FirstReturnParking(Caller, "VIGI", VO_SQUAD_EM, PROTO_VIGI, "VO_VIGI_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VPS) == 0)
		{
			FirstReturnParking(Caller, "VPS", VO_SQUAD_EM, PROTO_VPS, "VO_VPS_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VIMP) == 0)
		{
			FirstReturnParking(Caller, "VIMP", VO_SQUAD_EM, PROTO_VIMP, "VO_VIMP_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VAG) == 0)
		{
			FirstReturnParking(Caller, "VAG", VO_SQUAD_EM, PROTO_VAG, "VO_VAG_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VID2) == 0)
		{
			FirstReturnParking(Caller, "VID2", VO_SQUAD_EM, PROTO_VID2, "VO_VID2_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VPC) == 0)
		{
		FirstReturnParking(Caller, "VPC", VO_SQUAD_EM, PROTO_VPC, "VO_VPC_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE4) == 0)
		{
			FirstReturnParking(Caller, "PS4", VO_SQUAD_BITCHE, PROTO_PSE4, "VO_PS4_R", "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLclio3) == 0)
		{
			FirstReturnParking(Caller, "SPVL_Clio3", VO_SQUAD_BITCHE, PROTO_SPVLclio3, "VO_SPVL_Clio_R", "");
		}
		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_FPTAtego) == 0)
		{
			FirstReturnParking(Caller, "FPT_Atego", VO_SQUAD_GRENELLE, PROTO_FPTAtego, "VO_FPT_Atego_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CCR) == 0)
		{
			FirstReturnParking(Caller, "CCR", VO_SQUAD_GRENELLE, PROTO_CCR, "VO_CCR_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLUP) == 0)
		{
			FirstReturnParking(Caller, "SPVL_UP", VO_SQUAD_GRENELLE, PROTO_SPVLUP, "VO_SPVL_UP_R", "");
		}
		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_UMHMASTER) == 0)
		{
			FirstReturnParking(Caller, "UMH_master", VO_SQUAD_SAMU, PROTO_UMHMASTER, "VO_UMHmaster_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_UMHSPRINTER) == 0)
		{
			FirstReturnParking(Caller, "UMH_sprinter", VO_SQUAD_SAMU, PROTO_UMHSPRINTER, "VO_UMH_merco_R", "");
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VLMKANGOO) == 0)
		{
			FirstReturnParking(Caller, "VLM_kangoo", VO_SQUAD_SAMU, PROTO_VLMKANGOO, "VO_VLMkangoo_R", "");
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ERDF) == 0)
		{
			FirstReturnParking(Caller, "ERDF_1", VO_SQUAD_TEC, PROTO_GRDF, "VO_ERDF_1_R", "");
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ERDF) == 0)
		{
			FirstReturnParking(Caller, "ERDF_2", VO_SQUAD_TEC, PROTO_GRDF, "VO_ERDF_2_R", "");
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_GRDF) == 0)
		{
			FirstReturnParking(Caller, "GRDF", VO_SQUAD_TEC, PROTO_GRDF, "VO_GRDF_R", "");
		}

		else
		{
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
	}
};

object DummyCheckParked : CommandScript
{
	DummyCheckParked()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
	}

	void EndReturnParking(GameObject *Caller, char NAME[], char VO[])
	{
		Vehicle v(Caller);
		
		GameObjectList vehList(NAME);
		GameObject veh;
		if (vehList.GetNumObjects() == 1)
		{
			System::Log("[CASERNE] veh trouve");
			veh = vehList.GetObject(0);
			if (veh.GetPlayerMP() == Caller->GetPlayerMP())
				System::Log("[CASERNE] veh true");				
		} else {
			System::Log("[CASERNE] veh non trouve");
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		/*//Si un véhicule s'est garé entre temps sur la place, on relance le script
		GameObjectList l1;
		Game::CollectObstaclesOnVirtualObject(VO, l1, ACTOR_VEHICLE);
		for (int i = 0; i < l1.GetNumObjects(); i++)
		{
			GameObject *aCar = l1.GetObject(i);
			if(StrCompare(aCar->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
				v.PushActionExecuteCommand(ACTION_NEWLIST, "VcmdToFireStation", Caller, 0, false);
				return;
			}
		}*/
		//Sinon on se gare
		v.PushActionMove(ACTION_APPEND, veh.GetPosition());
		v.PushActionWait(ACTION_APPEND, 0.5f);	
		v.SetPosition(veh.GetPosition());
		float rot[9];
		veh.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		v.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		v.UpdatePlacement();

		PersonList passengers = v.GetPassengers();
		if (passengers.GetNumPersons() > 0)
			v.PushActionExecuteCommand(ACTION_APPEND, DUMMY_FIRESTATION, Caller, 0, false);
		v.PushActionWait(ACTION_APPEND, 2.2f);
		
		if (v.HasCommand(DUMMY_WARNINGLIGHTS))
		{
			v.EnableBlinker(BLT_NONE);
			v.RemoveCommand(DUMMY_WARNINGLIGHTS);
			v.AssignCommand(CMD_WARNINGLIGHTS);
		} else
			v.EnableBlinker(BLT_NONE);
		
		v.EnableHeadLights(false);
		v.EnableBlueLights(false);

		if (v.HasCommand("DummyVehicleCalled"))
			v.RemoveCommand("DummyVehicleCalled");
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{	
		Vehicle v(Caller);
		if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVB) == 0)
		{
			GameObjectList l1;
			bool vsav3Grenelle = false;
			int vsavEM = 0;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
					vsavEM++;
				}
				
			}
			//Si les deux places sont libres
			if (vsavEM == 0) {
				EndReturnParking(Caller, "VSAV_B_1", VO_SQUAD_EM);
				return;
			}
			//Si VSAV2 est libre et VSAV1 occupé
			else if (vsavEM == 1) {
				EndReturnParking(Caller, "VSAV_B_2", VO_SQUAD_EM);
				return;
			} 
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					vsav3Grenelle=true;
			}
			if (!vsav3Grenelle) {
				EndReturnParking(Caller, "VSAV_B_3", VO_SQUAD_GRENELLE);
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
			
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVR) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_1", VO_SQUAD_EM);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_2",VO_SQUAD_BITCHE); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) 
					exitLoop=true;
			}
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_3", VO_SQUAD_GRENELLE);
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;

		}
		
		//VID		CS EM
		//VID_2		CS BITCHE
		//VID_3		CS GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VID) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VID", VO_SQUAD_EM);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VID_2", VO_SQUAD_BITCHE); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			if (!exitLoop) {
				EndReturnParking(Caller, "VID_3", VO_SQUAD_GRENELLE); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}

		
		//PS5			EM
		//PS5_2			BITCHE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE5) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "PS5", VO_SQUAD_EM);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "PS5_2", VO_SQUAD_BITCHE); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		//PS4			BITCHE
		//PS4_2			GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE4) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "PS4", VO_SQUAD_BITCHE);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "PS4_2", VO_SQUAD_GRENELLE); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		//EPAN_ATEGO	BITCHE
		//EPAN_ATEGO_2	GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_EPAAtego) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "EPAN_Atego", VO_SQUAD_BITCHE);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "EPAN_Atego_2", VO_SQUAD_GRENELLE); 
				return;
			}
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ADPC_Master) == 0)
		{
			EndReturnParking(Caller, "Master_PC", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ARIveco) == 0)
		{
			EndReturnParking(Caller, "AR_Iveco", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ARMaster) == 0)
		{
			EndReturnParking(Caller, "AR_Master", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_FPTMidlum) == 0)
		{
			EndReturnParking(Caller, "FPT_Midlum", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CA) == 0)
		{
			EndReturnParking(Caller, "CA", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD) == 0)
		{
			EndReturnParking(Caller, "CD", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CESD) == 0)
		{
			EndReturnParking(Caller, "CESD", VO_SQUAD_EM);
		}
		/*else if(StrCompare(v.GetPrototypeFileName(), PROTO_CMO) == 0)
		{
			EndReturnParking(Caller, "CMO");
		}*/
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_EPAIveco) == 0)
		{
			EndReturnParking(Caller, "EPAN_Iveco", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PEV) == 0)
		{
			EndReturnParking(Caller, "PEV", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE3) == 0)
		{
			EndReturnParking(Caller, "PS3", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVL308) == 0)
		{
			EndReturnParking(Caller, "SPVL_308", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLkangoo) == 0)
		{
			EndReturnParking(Caller, "SPVL_Kangoo", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VIGI) == 0)
		{
			EndReturnParking(Caller, "VIGI", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VPS) == 0)
		{
			EndReturnParking(Caller, "VPS", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VIMP) == 0)
		{
			EndReturnParking(Caller, "VIMP", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VAG) == 0)
		{
			EndReturnParking(Caller, "VAG", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VID2) == 0)
		{
			EndReturnParking(Caller, "VID2", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VPC) == 0)
		{
			EndReturnParking(Caller, "VPC", VO_SQUAD_EM);
		}
		
		
		//CSBITCHE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_PSE4) == 0)
		{
			EndReturnParking(Caller, "PS4", VO_SQUAD_BITCHE);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLclio3) == 0)
		{
			EndReturnParking(Caller, "SPVL_Clio3", VO_SQUAD_BITCHE);
		}
		
		//CSGRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_FPTAtego) == 0)
		{
			EndReturnParking(Caller, "FPT_Atego", VO_SQUAD_GRENELLE);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CCR) == 0)
		{
			EndReturnParking(Caller, "CCR", VO_SQUAD_GRENELLE);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_SPVLUP) == 0)
		{
			EndReturnParking(Caller, "SPVL_UP", VO_SQUAD_GRENELLE);
		}
		
		//HOPITAL
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_UMHMASTER) == 0)
		{
			EndReturnParking(Caller, "UMH_master", VO_SQUAD_SAMU);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_UMHSPRINTER) == 0)
		{
			EndReturnParking(Caller, "UMH_sprinter", VO_SQUAD_SAMU);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VLMKANGOO) == 0)
		{
			EndReturnParking(Caller, "VLM_kangoo", VO_SQUAD_SAMU);
		}
		
		//TEC
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ERDF) == 0)
		{
			EndReturnParking(Caller, "ERDF_1", VO_SQUAD_TEC);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_ERDF) == 0)
		{
			EndReturnParking(Caller, "ERDF_2", VO_SQUAD_TEC);
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_GRDF) == 0)
		{
			EndReturnParking(Caller, "GRDF", VO_SQUAD_TEC);
		}
	}
};

object DummyAtFireStation : CommandScript
{
	DummyAtFireStation()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Vehicle v(Caller);
		ActorList l1;

		if(v.IsCollidingWithVirtualObject(VO_SQUAD_EM))
			l1 = Game::GetActors(VO_SPAWN_EM);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_BITCHE))
			l1 = Game::GetActors(VO_SPAWN_BITCHE);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_GRENELLE))
			l1 = Game::GetActors(VO_SPAWN_GRENELLE);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_SAMU))
			l1 = Game::GetActors(VO_SPAWN_SAMU);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_TEC))
			l1 = Game::GetActors(VO_SPAWN_TEC);
		else
			return;

		if(l1.GetNumActors() > 0)
			Vector Delete = l1.GetActor(0)->GetPosition();

		PersonList passengers = v.GetPassengers();
		if (passengers.GetNumPersons() > 0)
		{
			for(int i=0; i<passengers.GetNumPersons(); i++)
			{
				Person *p = passengers.GetPerson(i);
				p->PushActionLeaveCar(ACTION_NEWLIST, Caller);
				p->PushActionMove(ACTION_APPEND, Delete);
				p->PushActionDeleteOwner(ACTION_APPEND);
			}
		}
	}
};