const char CMD_AUTOSIREN_OFF[]			= "VcmdAutoSirenOff";
const char CMD_WARNINGLIGHTS[] 			= "VcmdWarningLightsOn";
const char DUMMY_WARNINGLIGHTS[]		= "DummyHasWarningLights";
const char CMD_FLOODLIGHTS_OFF[] 		= "VcmdFloodLightsOff";
const char CMD_FLOODLIGHTS_ON[] 		= "VcmdFloodLightsOn";
const char CMD_FLASHINGLIGHTS[] 		= "VcmdFlashingLights";
const char CMD_TOHOSPITAL[] 			= "VcmdToHospital";
	
const char DUMMY_DISABLE[] 				= "DummyDisableSiren";
const char DUMMY_HASSIREN[] 			= "DummyHasSiren";
const char DUMMY_PATROL[] 				= "DummyPatrol";
const char DUMMY_FIRESTATION[]			= "DummyAtFireStation";
const char DUMMY_CHECKPARKED[] 			= "DummyCheckParked";
	
//VO
const char VO_SPAWN_EM[]				= "VO_SPAWN_EM";
const char VO_SPAWN_BITCHE[]			= "VO_SPAWN_BITCHE";
const char VO_SPAWN_GRENELLE[]			= "VO_SPAWN_GRENELLE";

const char VO_SPAWN_SAMU[]				= "vo_spawn_samu"; //TODO modifier les noms des VO
const char VO_SPAWN_TEC[]				= "vo_spawn_tec";


const char VO_SQUAD_EM[] 				= "VO_SQUAD_EM";
const char VO_SQUAD_BITCHE[] 			= "VO_SQUAD_BITCHE";
const char VO_SQUAD_GRENELLE[] 			= "VO_SQUAD_GRENELLE";

const char VO_SQUAD_SAMU[]				= "vo_samu";
const char VO_SQUAD_TEC[]				= "vo_TEC";


//MEDICAL
const char PROTO_VSAVB[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVb.e4p";
const char PROTO_VSAVR[] 				= "mod:Prototypes/Vehicles/Ambulance/VSAVr.e4p";
const char PROTO_PSR[] 					= "mod:Prototypes/Vehicles/Ambulance/PSR.e4p";
const char PROTO_ARIveco[] 				= "mod:Prototypes/Vehicles/Ambulance/ARiveco.e4p";
const char PROTO_ARMaster[] 			= "mod:Prototypes/Vehicles/Ambulance/ARmaster.e4p";
const char PROTO_MasterPC[] 			= "mod:Prototypes/Vehicles/Ambulance/MasterPC.e4p";
const char PROTO_VPCM[] 				= "mod:Prototypes/Vehicles/Ambulance/VPCM.e4p";
const char PROTO_PFG[] 					= "mod:Prototypes/Vehicles/Ambulance/PFG.e4p";
const char PROTO_VES[] 					= "mod:Prototypes/Vehicles/Ambulance/VES.e4p";

const char PROTO_ADPC4[] 				= "mod:Prototypes/Vehicles/Ambulance/ADPC4.e4p";

//POMPIER
const char PROTO_CA[] 					= "mod:Prototypes/Vehicles/Fire Department/CA.e4p";
const char PROTO_CCR[]					= "mod:Prototypes/Vehicles/Fire Department/CCR.e4p";
const char PROTO_CD[]					= "mod:Prototypes/Vehicles/Fire Department/CD.e4p";
const char PROTO_CESD[]					= "mod:Prototypes/Vehicles/Fire Department/CESD.e4p";
const char PROTO_EPAAtego[] 			= "mod:Prototypes/Vehicles/Fire Department/EPA_atego.e4p";
const char PROTO_EPAIveco[]				= "mod:Prototypes/Vehicles/Fire Department/EPA_iveco.e4p";
const char PROTO_FPTAtego[]				= "mod:Prototypes/Vehicles/Fire Department/FPTatego.e4p";
const char PROTO_FPTMidlum[]			= "mod:Prototypes/Vehicles/Fire Department/FPTmidlum.e4p";
const char PROTO_VIMP[]					= "mod:Prototypes/Vehicles/Fire Department/VIMP.e4p";
const char PROTO_PEV[]					= "mod:Prototypes/Vehicles/Fire Department/PEV.e4p";
const char PROTO_PSE3[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE3.e4p";
const char PROTO_PSE4[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE4.e4p";
const char PROTO_PSE5[] 				= "mod:Prototypes/Vehicles/Fire Department/PSE5.e4p";
const char PROTO_SPVLclio[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLclio.e4p";
const char PROTO_SPVLkangoo[] 			= "mod:Prototypes/Vehicles/Fire Department/SPVLkangoo.e4p";
const char PROTO_SPVL308[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVL308.e4p";
const char PROTO_SPVLUP[] 				= "mod:Prototypes/Vehicles/Fire Department/SPVLup.e4p";
const char PROTO_VAG[] 					= "mod:Prototypes/Vehicles/Fire Department/VAG.e4p";
const char PROTO_VID[] 					= "mod:Prototypes/Vehicles/Fire Department/VID.e4p";
const char PROTO_VID2[] 				= "mod:Prototypes/Vehicles/Fire Department/VID2.e4p";
const char PROTO_VIGI[] 				= "mod:Prototypes/Vehicles/Fire Department/VIGI.e4p";
const char PROTO_VPS[] 					= "mod:Prototypes/Vehicles/Fire Department/VPS.e4p";

//TEC
const char OBJ_DEP[] 					= "mod:Prototypes/Vehicles/TEC/asf.e4p";
const char OBJ_EDF[] 					= "mod:Prototypes/Vehicles/TEC/erdf.e4p";
const char OBJ_GRUE[] 					= "mod:Prototypes/Vehicles/Sonstiges/Kran.e4p";


//SAMU
const char OBJ_UMH1[] 					= "mod:Prototypes/Vehicles/Ambulance/ARValenciennes.e4p";
const char OBJ_UMH2[] 					= "mod:Prototypes/Vehicles/Ambulance/ARSmur28.e4p";
const char OBJ_PCDSM[]					= "mod:Prototypes/Vehicles/Ambulance/va.e4p";
const char OBJ_PFG[]					= "mod:Prototypes/Vehicles/Ambulance/vlmdouai.e4p";
const char OBJ_VES[]					= "mod:Prototypes/Vehicles/Ambulance/S-Max_2010_NEF.e4p";
const char OBJ_PF1[]					= "mod:Prototypes/Vehicles/Ambulance/PF_FOURGON1.e4p";
const char OBJ_PF2[]					= "mod:Prototypes/Vehicles/Ambulance/PF_FOURGON2.e4p";
const char OBJ_DRAGON[]					= "mod:Prototypes/Vehicles/Ambulance/Dragon62.e4p";

	
const char SND_TOSTATION2[]				= "mod:Audio/FX/radio/ccgc.wav";
const char SND_TOSTATION3[]				= "mod:Audio/FX/radio/ccrm.wav";
const char SND_TOSTATION4[]				= "mod:Audio/FX/radio/epa.wav";
const char SND_TOSTATION5[]				= "mod:Audio/FX/radio/fc.wav";
const char SND_TOSTATION6[]				= "mod:Audio/FX/radio/FPTAtego.wav";
const char SND_TOSTATION7[]				= "mod:Audio/FX/radio/FPTMidlum.wav";	
const char SND_TOSTATION8[]				= "mod:Audio/FX/radio/vlc.wav";
const char SND_TOSTATION9[]				= "mod:Audio/FX/radio/vli.wav";
const char SND_TOSTATION10[]			= "mod:Audio/FX/radio/vpc.wav";
const char SND_TOSTATION11[]			= "mod:Audio/FX/radio/vpl.wav";
const char SND_TOSTATION12[]			= "mod:Audio/FX/radio/vrch.wav";
const char SND_TOSTATION13[]			= "mod:Audio/FX/radio/vsav1.wav";
const char SND_TOSTATION14[]			= "mod:Audio/FX/radio/vsav2.wav";
const char SND_TOSTATION15[]			= "mod:Audio/FX/radio/PSR.wav";
const char SND_TOSTATION16[]			= "mod:Audio/FX/radio/vsr.wav";
const char SND_TOSTATION17[]			= "mod:Audio/FX/radio/emod.wav";
const char SND_TOSTATION18[]			= "mod:Audio/FX/radio/cdhr.wav";
const char SND_TOSTATION19[]			= "mod:Audio/FX/radio/ccf.wav";
const char SND_TOSTATION20[]			= "mod:Audio/FX/radio/vtu.wav";
const char SND_TOSTATION21[]			= "mod:Audio/FX/radio/pma.wav";
const char SND_TOSTATION22[]			= "mod:Audio/FX/radio/umh.wav";
const char SND_TOSTATION23[]			= "mod:Audio/FX/radio/vlm.wav";
	
const char HINT_NOTVALID[] 				= "Ce vehicule ne fait pas partie de la caserne, il rentre a la base!";
const char HINT_NOSPACE[] 				= "Pas de place a la caserne, le vehicule retourne a la base!";
const char HINT_NOSPACE_AMBULANCE[] 	= "Pas de place a la caserne, le vehicule part en patrouille!";
const char HINT_TRANSPORTS[] 			= "Le vehicule transporte une victime, il va a l'hopital en premier!";
const char HINT_ERREUR[] 				= "Erreur";


int DummyGroup = 32;

object VcmdToFireStation : CommandScript
{
	VcmdToFireStation()
	{
		SetCursor("tofirestation");
		SetIcon("tofirestation");
		SetGroupID(DummyGroup);
 		SetGroupLeader(true);
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid())
			return false;

 		Vehicle v(Caller);
		if (!v.HasCommand("MoveTo"))
			return false;
		if(v.IsInstalled())
			return false;
		if (v.HasCommand("DummyWaterSupplyOn") || v.HasCommand("DummyWaterSupplyFromTankerOn"))
			return false;
		if (Game::IsCampaign() || Game::IsMission())
			return false;
			
		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || (Caller->GetID() != Target->GetID()))
			return false;
			
		return true;
	}

	void FirstReturnParking(GameObject *Caller, char NAME[], char SQUAD[], char PROTO[], char ROTATION[], const char sons[])
	{
		Vehicle v(Caller);
		int soundID;
		
		if (StrCompare(NAME, "") == 0) {
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		if (v.GetVehicleType() == VT_AMBULANCE_RTW && v.GetNumTransported() > 0)
		{
			v.PushActionExecuteCommand(ACTION_NEWLIST, CMD_TOHOSPITAL, Caller, 0, false);
			Mission::PlayHint(HINT_TRANSPORTS);
			return;
		}
		if (v.IsBlueLightEnabled())
			Game::ExecuteCommand(CMD_FLASHINGLIGHTS, &v, &v);

		if (v.HasCommand(DUMMY_WARNINGLIGHTS))
		{
			v.EnableBlinker(BLT_NONE);
			v.RemoveCommand(DUMMY_WARNINGLIGHTS);
			v.AssignCommand(CMD_WARNINGLIGHTS);
		}
		if (v.HasCommand(CMD_FLOODLIGHTS_OFF))
		{
			v.EnableSpecialLights(false);
			v.RemoveCommand(CMD_FLOODLIGHTS_OFF);
			v.AssignCommand(CMD_FLOODLIGHTS_ON);
		}
		if (v.HasObjectPath(NULL))
			Game::ExecuteCommand(DUMMY_PATROL, &v, &v);
		if (v.HasCommand(DUMMY_HASSIREN) && v.HasCommand(CMD_AUTOSIREN_OFF))
			Game::ExecuteCommand(DUMMY_DISABLE, &v, &v);
		
		GameObjectList vehList(NAME);
		GameObject maker;
		if (vehList.GetNumObjects() == 1)
		{
			System::Log("[CASERNE] veh trouve");
			maker = vehList.GetObject(0);
			if (maker.GetPlayerMP() == Caller->GetPlayerMP())
				System::Log("[CASERNE] veh true");				
		} else {
			System::Log("[CASERNE] veh non trouve");
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		if (StrCompare(sons, "") != 0)
		{
			soundID = Audio::PlaySample3D(sons, Caller->GetPosition());
			v.AttachSound(soundID);
		}
		
		GameObjectList l1;
 		Game::CollectObstaclesOnVirtualObject(SQUAD, l1, ACTOR_VEHICLE);
		for (int i = 0; i < l1.GetNumObjects(); i++)
		{
			GameObject *veh = l1.GetObject(i);
			if(StrCompare(veh->GetPrototypeFileName(), PROTO) == 0) {
				Mission::PlayHint(HINT_NOSPACE);
				v.PushActionReturnToBase(ACTION_NEWLIST);
				return;
			}
		}
		
		ActorList la1 = Game::GetActors(ROTATION);
		if(la1.GetNumActors() > 0)
			Vector FirstPoint = la1.GetActor(0)->GetPosition();
		
		v.PushActionMove(ACTION_NEWLIST, FirstPoint);
		v.PushActionWait(ACTION_APPEND, 1.0f);
		v.PushActionExecuteCommand(ACTION_APPEND, DUMMY_CHECKPARKED, Caller, 0, false);
		
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Vehicle v(Caller);
		//VSAV B 1 CS EM
		//VSAV B 2 CS EM
		//VSAV B 3 CS GRENELLE
		//Les deux premiers VSAV Ã©tant sur le meme squad, on appelle la fonction FirstReturnParking avec la place au lieu du squad
		if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVB) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			int vsavEM = 0;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
					vsavEM++;
				}
				
			}

			//Si les deux places sont libres
			if (vsavEM == 0) {
				FirstReturnParking(Caller, "VSAV_B_1", "", PROTO_VSAVB, "VO_VSAV_B_1_R", "");
				return;
			}
			//Si VSAV2 est libre et VSAV1 occupÃ©
			else if (vsavEM == 1) {
				FirstReturnParking(Caller, "VSAV_B_2", "", PROTO_VSAVB, "VO_VSAV_B_2_R", "");
				return;
			} 
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_B_3", VO_SQUAD_GRENELLE, PROTO_VSAVB, "VO_VSAV_B_3_R", ""); 
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		//VSAV R 1 CS EM
		//VSAV R 2 CS BITCHE
		//VSAV R 3 CS GRENELLE
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVR) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_1", VO_SQUAD_EM, PROTO_VSAVR, "VO_VSAV_R_1_R", "");
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_2", VO_SQUAD_BITCHE, PROTO_VSAVR, "VO_VSAV_R_2_R", ""); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			if (!exitLoop) {
				FirstReturnParking(Caller, "VSAV_R_3", VO_SQUAD_GRENELLE, PROTO_VSAVR, "VO_VSAV_R_3_R", ""); 
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		//VID			EM
		//VID_2			BITCHE
		//VID_3			GRENELLE
		
		//PS5			EM
		//PS5_2			BITCHE
		
		//PS4			BITCHE
		//PS4_2			GRENELLE
		
		//EPAN_ATEGO	BITCHE
		//EPAN_ATEGO_2	GRENELLE

		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD) == 0)
		{
			FirstReturnParking(Caller, "CD", VO_SQUAD_EM, PROTO_CD, "VO_CD_R", "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_EPAN8) == 0)
		{
			FirstReturnParking(Caller, "EPAN 8", VO_CASERNELAND, OBJ_EPAN8, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS132) == 0)
		{
			FirstReturnParking(Caller, "PS 132", VO_CASERNELAND, OBJ_PS132, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_FPT21) == 0)
		{
			FirstReturnParking(Caller, "FPT 21", VO_CASERNELAND, OBJ_FPT21, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD8) == 0)
		{
			FirstReturnParking(Caller, "CD 8", VO_CASERNELAND, PROTO_CD8, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID183) == 0)
		{
			FirstReturnParking(Caller, "VID 183", VO_CASERNELAND, OBJ_VID183, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID220) == 0)
		{
			FirstReturnParking(Caller, "VID 220", VO_CASERNELAND, OBJ_VID220, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VPC1) == 0)
		{
			FirstReturnParking(Caller, "VPC 1", VO_CASERNELAND, OBJ_VPC1, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL370) == 0)
		{
			FirstReturnParking(Caller, "SPVL 370", VO_CASERNELAND, OBJ_SPVL370, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL920) == 0)
		{
			FirstReturnParking(Caller, "SPVL 920", VO_CASERNELAND, OBJ_SPVL920, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VPS6) == 0)
		{
			FirstReturnParking(Caller, "VPS 6", VO_CASERNELAND, OBJ_VPS6, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VIGI10) == 0)
		{
			FirstReturnParking(Caller, "VIGI 10", VO_CASERNELAND, OBJ_VIGI10, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_CESD2) == 0)
		{
			FirstReturnParking(Caller, "CESD 2", VO_CASERNELAND, OBJ_CESD2, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VIMP7) == 0)
		{
			FirstReturnParking(Caller, "VIMP 7", VO_CASERNELAND, OBJ_VIMP7, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PEV5) == 0)
		{
			FirstReturnParking(Caller, "PEV 5", VO_CASERNELAND, OBJ_PEV5, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VAG2) == 0)
		{
			FirstReturnParking(Caller, "VAG 2", VO_CASERNELAND, OBJ_VAG2, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_CA25) == 0)
		{
			FirstReturnParking(Caller, "CA 25", VO_CASERNELAND, OBJ_CA25, "");
		}
		//TODO
		/*else if(StrCompare(v.GetPrototypeFileName(), OBJ_CMO1) == 0)
		{
			FirstReturnParking(Caller, "CMO 1", VO_CASERNELAND, OBJ_CMO1, "");
		}*/
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_AR50) == 0)
		{
			FirstReturnParking(Caller, "AR 50", VO_CASERNELAND, OBJ_AR50, "");
		}		
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_AR63) == 0)
		{
			FirstReturnParking(Caller, "AR 63", VO_CASERNELAND, OBJ_AR63, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_ADPC4) == 0)
		{
			FirstReturnParking(Caller, "ADPC 4", VO_CASERNELAND, OBJ_ADPC4,"");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_EPAN3) == 0)
		{
			FirstReturnParking(Caller, "EPAN 3", VO_CASERNEBITCHE, OBJ_EPAN3, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL212) == 0)
		{
			FirstReturnParking(Caller, "SPVL 212", VO_CASERNEBITCHE, OBJ_SPVL212, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID180) == 0)
		{
			FirstReturnParking(Caller, "VID 180", VO_CASERNEBITCHE, OBJ_VID180, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS189) == 0)
		{
			FirstReturnParking(Caller, "PS 189", VO_CASERNEBITCHE, OBJ_PS189, "");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS191) == 0)
		{
			FirstReturnParking(Caller, "PS 191", VO_CASERNEBITCHE, OBJ_PS191, "");
		}
		else
		{
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
	}
};

object DummyCheckParked : CommandScript
{
	DummyCheckParked()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
	}

	void EndReturnParking(GameObject *Caller, char NAME[], char VO[])
	{
		Vehicle v(Caller);
		
		GameObjectList vehList(NAME);
		GameObject veh;
		if (vehList.GetNumObjects() == 1)
		{
			System::Log("[CASERNE] veh trouve");
			veh = vehList.GetObject(0);
			if (veh.GetPlayerMP() == Caller->GetPlayerMP())
				System::Log("[CASERNE] veh true");				
		} else {
			System::Log("[CASERNE] veh non trouve");
			Mission::PlayHint(HINT_NOTVALID);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
		}
		
		/*//Si un vÃ©hicule s'est garÃ© entre temps sur la place, on relance le script
		GameObjectList l1;
		Game::CollectObstaclesOnVirtualObject(VO, l1, ACTOR_VEHICLE);
		for (int i = 0; i < l1.GetNumObjects(); i++)
		{
			GameObject *aCar = l1.GetObject(i);
			if(StrCompare(aCar->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
				v.PushActionExecuteCommand(ACTION_NEWLIST, "VcmdToFireStation", Caller, 0, false);
				return;
			}
		}*/
		//Sinon on se gare
		v.PushActionMove(ACTION_APPEND, veh.GetPosition());
		v.PushActionWait(ACTION_APPEND, 0.5f);	
		v.SetPosition(veh.GetPosition());
		float rot[9];
		veh.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		v.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		v.UpdatePlacement();

		PersonList passengers = v.GetPassengers();
		if (passengers.GetNumPersons() > 0)
			v.PushActionExecuteCommand(ACTION_APPEND, DUMMY_FIRESTATION, Caller, 0, false);
		v.PushActionWait(ACTION_APPEND, 2.2f);
		
		if (v.HasCommand(DUMMY_WARNINGLIGHTS))
		{
			v.EnableBlinker(BLT_NONE);
			v.RemoveCommand(DUMMY_WARNINGLIGHTS);
			v.AssignCommand(CMD_WARNINGLIGHTS);
		} else
			v.EnableBlinker(BLT_NONE);
		
		v.EnableHeadLights(false);
		v.EnableBlueLights(false);

		if (v.HasCommand("DummyVehicleCalled"))
			v.RemoveCommand("DummyVehicleCalled");
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{	
		Vehicle v(Caller);
		if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVB) == 0)
		{
			GameObjectList l1;
			bool vsav3Grenelle = false;
			int vsavEM = 0;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) {
					vsavEM++;
				}
				
			}
			//Si les deux places sont libres
			if (vsavEM == 0) {
				EndReturnParking(Caller, "VSAV_B_1", VO_SQUAD_EM);
				return;
			}
			//Si VSAV2 est libre et VSAV1 occupÃ©
			else if (vsavEM == 1) {
				EndReturnParking(Caller, "VSAV_B_2", VO_SQUAD_EM);
				return;
			} 
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					vsav3Grenelle=true;
			}
			if (!vsav3Grenelle) {
				EndReturnParking(Caller, "VSAV_B_3", VO_SQUAD_GRENELLE);
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;
			
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_VSAVR) == 0)
		{
			GameObjectList l1;
			bool exitLoop = false;
			
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_EM, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_1", VO_SQUAD_EM);
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_BITCHE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0)
					exitLoop=true;
			}
			
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_2",VO_SQUAD_BITCHE); 
				return;
			}
			exitLoop = false; //Reset de la boucle
			Game::CollectObstaclesOnVirtualObject(VO_SQUAD_GRENELLE, l1, ACTOR_VEHICLE);
			for (int i = 0; i < l1.GetNumObjects(); i++)
			{
				GameObject *veh = l1.GetObject(i);
				if(StrCompare(veh->GetPrototypeFileName(), v.GetPrototypeFileName()) == 0) 
					exitLoop=true;
			}
			if (!exitLoop) {
				EndReturnParking(Caller, "VSAV_R_3", VO_SQUAD_GRENELLE);
				return;
			}
			 
			
			Mission::PlayHint(HINT_NOSPACE);
			v.PushActionReturnToBase(ACTION_NEWLIST);
			return;

		}
		
		
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD) == 0)
		{
			EndReturnParking(Caller, "CD", VO_SQUAD_EM);
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_EPAN8) == 0)
		{
			EndReturnParking(Caller, "EPAN 8");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_EPAN3) == 0)
		{
			EndReturnParking(Caller, "EPAN 3");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL370) == 0)
		{
			EndReturnParking(Caller, "SPVL 370");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL920) == 0)
		{
			EndReturnParking(Caller, "SPVL 920");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_CA25) == 0)
		{
			EndReturnParking(Caller, "CA 25");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS202) == 0)
		{
			EndReturnParking(Caller, "PSE 202");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS132) == 0)
		{
			EndReturnParking(Caller, "PSE 132");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS189) == 0)
		{
			EndReturnParking(Caller, "PSE 189");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PS191) == 0)
		{
			EndReturnParking(Caller, "PSE 191");
		}
		else if(StrCompare(v.GetPrototypeFileName(), PROTO_CD8) == 0)
		{
			EndReturnParking(Caller, "CD 8");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VIGI10) == 0)
		{
			EndReturnParking(Caller, "VIGI 10");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VPS6) == 0)
		{
			EndReturnParking(Caller, "VPS 6");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_AR50) == 0)
		{
			EndReturnParking(Caller, "AR 50");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_AR63) == 0)
		{
			EndReturnParking(Caller, "AR 63");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_ADPC4) == 0)
		{
			EndReturnParking(Caller, "ADPC 4");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VIMP7) == 0)
		{
			EndReturnParking(Caller, "VIMP 7");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VAG2) == 0)
		{
			EndReturnParking(Caller, "VAG 2");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_CESD2) == 0)
		{
			EndReturnParking(Caller, "CESD 2");
		}
		//else if(StrCompare(v.GetPrototypeFileName(), OBJ_CMO1) == 0)
		//{
			//EndReturnParking(Caller, "CMO 1");
		//}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_PEV5) == 0)
		{
			EndReturnParking(Caller, "PEV 5");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VPC1) == 0)
		{
			EndReturnParking(Caller, "VPC 1");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID183) == 0)
		{
			EndReturnParking(Caller, "VID 183");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID220) == 0)
		{
			EndReturnParking(Caller, "VID 220");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_VID180) == 0)
		{
			EndReturnParking(Caller, "VID 180");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL212) == 0)
		{
			EndReturnParking(Caller, "SPVL 212");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL370) == 0)
		{
			EndReturnParking(Caller, "SPVL 370");
		}
		else if(StrCompare(v.GetPrototypeFileName(), OBJ_SPVL920) == 0)
		{
			EndReturnParking(Caller, "SPVL 920");
		}
	}
};

object DummyAtFireStation : CommandScript
{
	DummyAtFireStation()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Vehicle v(Caller);
		ActorList l1;

		if(v.IsCollidingWithVirtualObject(VO_SQUAD_EM))
			l1 = Game::GetActors(VO_SPAWN_EM);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_BITCHE))
			l1 = Game::GetActors(VO_SPAWN_BITCHE);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_GRENELLE))
			l1 = Game::GetActors(VO_SPAWN_GRENELLE);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_SAMU))
			l1 = Game::GetActors(VO_SPAWN_SAMU);
		else if(v.IsCollidingWithVirtualObject(VO_SQUAD_TEC))
			l1 = Game::GetActors(VO_SPAWN_TEC);
		else
			return;

		if(l1.GetNumActors() > 0)
			Vector Delete = l1.GetActor(0)->GetPosition();

		PersonList passengers = v.GetPassengers();
		if (passengers.GetNumPersons() > 0)
		{
			for(int i=0; i<passengers.GetNumPersons(); i++)
			{
				Person *p = passengers.GetPerson(i);
				p->PushActionLeaveCar(ACTION_NEWLIST, Caller);
				p->PushActionMove(ACTION_APPEND, Delete);
				p->PushActionDeleteOwner(ACTION_APPEND);
			}
		}
	}
};