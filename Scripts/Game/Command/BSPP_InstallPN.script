
object InstallSignal_PN_PMV: CommandScript
{
	InstallSignal_PN_PMV()
	{
		SetIcon("Install");
		SetCursor("Install");
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_INSTALL);
		SetGroupLeader(true);
		SetPriority(50);	
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_VEHICLE)
			return false;

		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
 		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID() || Caller->GetType() != ACTOR_VEHICLE)
 			return false;
 
 		return true;
	}
			
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		
		v.DisableAllCommands();

		if(Game::IsFreeplay() || Game::IsCampaign() || Game::IsMultiplayer())
		{
		v.PushActionWait(ACTION_NEWLIST, 2.6f);
		v.PlayAnimOpenDoor(DAT_SPECIAL, 2.5f, Caller);
		}
		else
		{
		v.PushActionWait(ACTION_NEWLIST, 2.6f);
		v.PlayAnimOpenDoor(DAT_SPECIAL, 6.0f, Caller);
		}

		v.PushActionExecuteCommand(ACTION_APPEND, "InstallSignal2_PN_PMV", Caller, 0, false);
	}
};

object InstallSignal2_PN_PMV: CommandScript
{
	InstallSignal2_PN_PMV()
	{
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);

		Vector pos = v.GetPosition();
		float rot[9];
		v.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);

		Vehicle vec = Game::CreateVehicle("mod:Prototypes/Vehicles/Police/pn_master_pmv_2", "LPF2");
	        vec.SetPosition(pos);
		vec.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
                vec.UpdatePlacement();
		vec.SetSpeed(7.0f);
		vec.SetMaxPassengers(2);
	
		PersonList passengers = v.GetPassengers();
		for(int i = 0; i < passengers.GetNumPersons(); i++)
		{
			v.RemovePassenger(&passengers.GetPerson(i));
			vec.AddPassenger(&passengers.GetPerson(i));
		}

		if (v.IsSelected())
		{
			v.Deselect();
			vec.Select();
		}

		if (Game::IsMultiplayer())
		{
			int PlayerID = v.GetPlayerMP();
			vec.SetPlayerMP(PlayerID);
		}

		v.PushActionWait(ACTION_APPEND, 0.01f);
		v.PushActionDeleteOwner(ACTION_APPEND);
	}
};

object DeInstallSignal_PN_PMV: CommandScript
{
	bool deinstall;

	DeInstallSignal_PN_PMV()
	{
      	SetIcon("Deinstall");
      	SetCursor("Deinstall");
	SetGroupLeader(true);
	SetPriority(50);
	SetValidTargets(ACTOR_VEHICLE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_VEHICLE)
			return false;

		Vehicle v(Caller);
		if (v.IsInstalled())
		{
			if (v.GetVehicleType() == VT_FIREFIGHTERS_DLK && v.IsUplifting())
				return false;
		}
		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID())
			return false;
		
		deinstall = false;

		Vehicle v(Caller);
		if (v.IsInstalled())
		{
			if (v.GetVehicleType() == VT_FIREFIGHTERS_DLK && v.IsUplifting())
				return false;

			deinstall = true;
		}		
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);

		if (!deinstall)
		{
			v.PushActionExecuteCommand(ACTION_APPEND, "DeInstallSignal2_PN_PMV", Caller, 0, false);
		}
		else
		{
		if (v.GetVehicleType() == VT_FIREFIGHTERS_DLK && v.IsUplifted())
		{
			v.PushActionBasketDown(ACTION_APPEND, Vector(0.f, 0.f, 0.f));
			v.PushActionDeinstall(ACTION_APPEND);
			v.PushActionExecuteCommand(ACTION_APPEND, "DeInstallSignal2_PN_PMV", Caller, 0, false);
		}
		else
		{
			v.PushActionDeinstall(ACTION_APPEND);
			v.PushActionExecuteCommand(ACTION_APPEND, "DeInstallSignal2_PN_PMV", Caller, 0, false);
		}
		}
	}
};

object DeInstallSignal2_PN_PMV: CommandScript
{
	DeInstallSignal2_PN_PMV()
	{
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);

		Vector pos = v.GetPosition();
		float rot[9];
		v.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
	
		Vehicle vec = Game::CreateVehicle("mod:Prototypes/Vehicles/Police/pn_master_pmv", "LPF");
		vec.PlayAnimOpenDoor(DAT_SPECIAL, 0.0f, Caller);

	        vec.SetPosition(pos);
		vec.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
                vec.UpdatePlacement();
		vec.SetSpeed(8.0f);
		vec.SetMaxPassengers(2);
	
		PersonList passengers = v.GetPassengers();
		for(int i = 0; i < passengers.GetNumPersons(); i++)
		{
			v.RemovePassenger(&passengers.GetPerson(i));
			vec.AddPassenger(&passengers.GetPerson(i));
		}

		if(Game::IsFreeplay() || Game::IsCampaign() || Game::IsMultiplayer())
		{
		vec.PushActionWait(ACTION_NEWLIST, 2.6f);
		vec.PlayAnimCloseDoor(DAT_SPECIAL, 2.5f, Caller);
		}
		else
		{
		vec.PushActionWait(ACTION_NEWLIST, 2.6f);
		vec.PlayAnimCloseDoor(DAT_SPECIAL, 6.0f, Caller);
		}

		if (v.IsSelected())
		{
			v.Deselect();
			vec.Select();
		}

		if (Game::IsMultiplayer())
		{
			int PlayerID = v.GetPlayerMP();
			vec.SetPlayerMP(PlayerID);
		}

		v.PushActionWait(ACTION_APPEND, 0.01f);
		v.PushActionDeleteOwner(ACTION_APPEND);
	}
};
