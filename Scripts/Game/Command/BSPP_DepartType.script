//******************************************************************************************
//
//		Script des départs types BSPP
//		Edité par Superjajaman75 pour MOD BSPP
//		Reproduction autorisé avec conservation crédit
//
//******************************************************************************************

const char CMD_SIREN[]					= "Deux_Tons";
const char CMD_AUTOSIREN_OFF[]			= "VcmdAutoSirenOff";
const char CMD_WARNINGLIGHTS_OFF[] 		= "VcmdWarningLightsOff";
const char CMD_WARNINGLIGHTS_ON[] 		= "VcmdWarningLightsOn";
const char CMD_FLOODLIGHTS_OFF[] 		= "VcmdFloodLightsOff";
const char CMD_FLOODLIGHTS_ON[] 		= "VcmdFloodLightsOn";
const char CMD_STANDBY_ON[]				= "VcmdStandbyOn";
const char CMD_STANDBY_OFF[]			= "VcmdStandbyOff";
const char DUMMY_HASSIREN[] 			= "DummyHasSiren";
const char DUMMY_PATROL[] 				= "DummyPatrol";


const char HINT_FEULEGER[] 								= "DEPART FEU LEGER ! PSE au depart";
const char HINT_NORMAL[] 								= "DEPART NORMAL ! FPT - PS - EPA - VLRCGI au depart";
const char HINT_RENFORTINCENDIE[] 				= "RENFORT INCENDIE ! FPT - PS - EPA - EPA - EPA - CA - CESD - VSAV - AR - CD - PEV - 1 GRCP (VSAV - CRAC) au depart";
const char HINT_RENFORTHABITATION[] 			= "RENFORT HABITATION ! FPT - FPT - PS - PS - PS - EPA - EPA - VSAV - VSAV - AR - AR - PEV - CESD - CD - 1 GRCP (VSAV - CRAC) au depart";
const char HINT_RENFORTANTICIPATION[] 		= "RENFORT ANTICIPATION ! FPT - EPA - VSAV - AR - CRAC - EDF au depart";
const char HINT_RENFORTCOMMANDEMENT[] 		= "RENFORT COMMANDEMENT ! PC - VPCM - SPVLKangoo - SPVLClio au depart";
const char HINT_SRM[] 										= "DEPART SECOURS ROUTIER MOYEN ! CD - VSAV - PS - VPS au depart";
const char HINT_SRLO[] 									= "DEPART SECOURS ROUTIER LOURD ! CD - VSAV - PS - AR - VPS au depart";
const char HINT_SRA[] 										= "DEPART SECOURS ROUTIER AQUATIQUE ! CD - VSAV - SIS - CSP - VPS - AR au depart";
const char HINT_UM[] 										= "DEPART URGENCE MEDICAL ! AR au depart";
const char HINT_SM[] 										= "DEPART SECOURS MEDICAL ! VSAV au depart";
const char HINT_SUICIDE[] 								= "DEPART TENTATIVE SUICIDE ! EPA - PSE5 - VSAV - KangooPN - VIMP - VAG  au depart";
const char HINT_GIFF[]										= "GROUPE INTERVENTION FEU FORET ! CCR - CCR - SPVLKangoo - CCR - CCR au depart";
const char HINT_NRBC[]									= "DEPART NRBC ! CIC CIB - CIC CRR - VANRBC - VDIP - FPT - PS - AR - AR - VSAV - VSAV - VSAV - PSR - PSR au depart";

	
const char SND_FEULEGER[]									= "mod:Audio/FX/depart/PSE.wav";
const char SND_NORMAL[]									= "mod:Audio/FX/depart/DN.wav";
const char SND_RENFORTINCENDIE[]					= "mod:Audio/FX/depart/DN2.wav";
const char SND_RENFORTHABITATION[]				= "mod:Audio/FX/depart/DG.wav";
const char SND_RENFORTANTICIPATION[]			= "mod:Audio/FX/depart/E.wav";
const char SND_RENFORTCOMMANDEMENT[]		= "mod:Audio/FX/depart/VLR.wav";
const char SND_SECOURROUTIERMOYEN[]			= "mod:Audio/FX/depart/VID.wav";
const char SND_SECOUROUTIERLOURD[]				= "mod:Audio/FX/depart/FACA.wav";
const char SND_SECOUROUTIERAQUATIQUE[]		= "mod:Audio/FX/depart/CA.wav";
const char SND_URGENCEMEDICALE[]					= "mod:Audio/FX/depart/AR1.wav";
const char SND_SECOURSMEDICALE[]					= "mod:Audio/FX/depart/VSAV1.wav";
const char SND_TENTATIVEDESUICIDE[]				= "mod:Audio/FX/depart/VSAVrenfort.wav";	
const char SND_GIFF[]											= "mod:Audio/FX/depart/RonfleurLong.wav";
const char SND_NRBC[]										= "mod:Audio/FX/depart/RonfleurLong.wav";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

object FeuLegerCS : CommandScript
{
	FeuLegerCS()
	{
		SetIcon("missionFL");
		SetCursor("FL");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{	
		Mission::PlayHint(HINT_FEULEGER);	
		Audio::PlaySample3D(SND_FEULEGER, Caller->GetPosition());

			Game::ExecuteCommand("Renfort_PSE4", Caller);
	}
};

object DepartNormalCS : CommandScript
{
	DepartNormalCS()
	{
		SetIcon("missionDN");
		SetCursor("DN");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;
		
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_NORMAL);	
		Audio::PlaySample3D(SND_NORMAL, Caller->GetPosition());

			Game::ExecuteCommand("Renfort_FPTMidlum", Caller);
			Game::ExecuteCommand("Renfort_EPAIveco", Caller);
			Game::ExecuteCommand("Renfort_PSE5", Caller);
		//Game::ExecuteCommand("Renfort_VLRCGI", Caller);

	}
};

object RenfortIncendieCS : CommandScript
{
	RenfortIncendieCS()
	{
		SetIcon("missionRI");
		SetCursor("RI");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_RENFORTINCENDIE);	
		Audio::PlaySample3D(SND_RENFORTINCENDIE, Caller->GetPosition());
		
		Game::ExecuteCommand("Renfort_FPTMidlum", Caller);
		Game::ExecuteCommand("Renfort_EPAIveco", Caller);
		Game::ExecuteCommand("Renfort_EPAAtego", Caller);
		Game::ExecuteCommand("Renfort_EPAAtego", Caller);
		Game::ExecuteCommand("Renfort_PSE4", Caller);
		Game::ExecuteCommand("Renfort_CA", Caller);
		Game::ExecuteCommand("Renfort_CESD", Caller);
		Game::ExecuteCommand("Renfort_CD", Caller);
		Game::ExecuteCommand("Renfort_PEV", Caller);
		Game::ExecuteCommand("Renfort_CRAC", Caller);
		Game::ExecuteCommand("Renfort_VSAVR", Caller);
		Game::ExecuteCommand("Renfort_ARIveco", Caller);
		Game::ExecuteCommand("Renfort_ARMaster", Caller);
		Game::ExecuteCommand("Renfort_UMHmaster", Caller);
	}
};
object RenfortHabitationCS : CommandScript
{
	RenfortHabitationCS()
	{
		SetIcon("missionRH");
		SetCursor("RH");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_RENFORTHABITATION);	
		Audio::PlaySample3D(SND_RENFORTHABITATION, Caller->GetPosition());
		
			Game::ExecuteCommand("Renfort_FPTAtego", Caller);
			Game::ExecuteCommand("Renfort_FPTMidlum", Caller);
			Game::ExecuteCommand("Renfort_PSE5", Caller);
			Game::ExecuteCommand("Renfort_PSE4", Caller);
			Game::ExecuteCommand("Renfort_PSE5", Caller);
			Game::ExecuteCommand("Renfort_EPAIveco", Caller);
			Game::ExecuteCommand("Renfort_EPAAtego", Caller);
			Game::ExecuteCommand("Renfort_VSAVB", Caller);
			Game::ExecuteCommand("Renfort_VSAVR", Caller);
			Game::ExecuteCommand("Renfort_ARIveco", Caller);
			Game::ExecuteCommand("Renfort_ARMaster", Caller);
			Game::ExecuteCommand("Renfort_PEV", Caller);
			Game::ExecuteCommand("Renfort_CD", Caller);
			Game::ExecuteCommand("Renfort_CRAC", Caller);
			//Game::ExecuteCommand("Renfort_VLRDSM", Caller);
			//Game::ExecuteCommand("Renfort_VLROGC", Caller);
			//Game::ExecuteCommand("Renfort_VLRCDG", Caller);
			Game::ExecuteCommand("Renfort_VPC", Caller);
	}
};
object RenfortAnticipationCS : CommandScript
{
	RenfortAnticipationCS()
	{
		SetIcon("missionRA");
		SetCursor("RA");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_RENFORTANTICIPATION);	
		Audio::PlaySample3D(SND_RENFORTANTICIPATION, Caller->GetPosition());
		


		Game::ExecuteCommand("Renfort_FPTAtego", Caller);
		Game::ExecuteCommand("Renfort_EPAAtego", Caller);
		Game::ExecuteCommand("Renfort_VSAVB", Caller);
		Game::ExecuteCommand("Renfort_ARMaster", Caller);
		Game::ExecuteCommand("Renfort_CRAC", Caller);
		Game::ExecuteCommand("Renfort_EDF", Caller);
	}
};
object RenfortCommandementCS : CommandScript
{
	RenfortCommandementCS()
	{
		SetIcon("missionRC");
		SetCursor("RC");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_RENFORTCOMMANDEMENT);	
		Audio::PlaySample3D(SND_RENFORTCOMMANDEMENT, Caller->GetPosition());
		
		Game::ExecuteCommand("Renfort_VPC", Caller);
		//Game::ExecuteCommand("Renfort_CMO", Caller);
		Game::ExecuteCommand("Renfort_SPVL308", Caller);
		Game::ExecuteCommand("Renfort_SPVLkangoo", Caller);
	}
};
object SecoursRoutierMoyenCS : CommandScript
{
	SecoursRoutierMoyenCS()
	{
		SetIcon("missionSRM");
		SetCursor("SRM");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
		SetDeselectCaller(false);
		SetSelfClickActivation(true);
		SetHighlightingEnabled(false);
 		SetGroupLeader(true);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_SRM);	
		Audio::PlaySample3D(SND_SECOURROUTIERMOYEN, Caller->GetPosition());
		
			Game::ExecuteCommand("Renfort_CD", Caller);
			Game::ExecuteCommand("Renfort_VSAVB", Caller);
			Game::ExecuteCommand("Renfort_PSE3", Caller);
			Game::ExecuteCommand("Renfort_VPS", Caller);
			Game::ExecuteCommand("Renfort_PNC8", Caller);
			Game::ExecuteCommand("Renfort_PSR", Caller);
	}
};

object SecoursRoutierLourdCS : CommandScript
{
	SecoursRoutierLourdCS()
	{
		SetIcon("missionSRLo");
		SetCursor("SRLo");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
	
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_SRLO);
		Audio::PlaySample3D(SND_SECOUROUTIERLOURD, Caller->GetPosition());
		
			Game::ExecuteCommand("Renfort_CD", Caller);
			Game::ExecuteCommand("Renfort_VSAVB", Caller);
			Game::ExecuteCommand("Renfort_PSE5", Caller);
			Game::ExecuteCommand("Renfort_VPS", Caller);
			Game::ExecuteCommand("Renfort_ARIveco", Caller);
			Game::ExecuteCommand("Renfort_UMHsprinter", Caller);
			Game::ExecuteCommand("Renfort_PNSCENIC", Caller);
	}
};

object SecoursRoutierAquatiqueCS: CommandScript
{
	SecoursRoutierAquatiqueCS()
	{
		SetIcon("missionSRA");
		SetCursor("SRA");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_SRA);
		Audio::PlaySample3D(SND_SECOUROUTIERAQUATIQUE, Caller->GetPosition());
		
	
			Game::ExecuteCommand("Renfort_CD", Caller);
			Game::ExecuteCommand("Renfort_VSAVR", Caller);
			Game::ExecuteCommand("Renfort_CSP", Caller);
			Game::ExecuteCommand("Renfort_SIS", Caller);
			Game::ExecuteCommand("Renfort_VPS", Caller);
			Game::ExecuteCommand("Renfort_ARMaster", Caller);
			Game::ExecuteCommand("Renfort_PNBerlingo", Caller);
	}
};

object UrgenceMedicaleCS: CommandScript
{
	UrgenceMedicaleCS()
	{
		SetIcon("missionUM");
		SetCursor("UM");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_UM);
		Audio::PlaySample3D(SND_URGENCEMEDICALE, Caller->GetPosition());
		

			Game::ExecuteCommand("Renfort_ARMaster", Caller);
	}
};

object SecoursMedicalCS: CommandScript
{
	SecoursMedicalCS()
	{
		SetIcon("missionSM");
		SetCursor("SM");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_SM);
		Audio::PlaySample3D(SND_SECOURSMEDICALE, Caller->GetPosition());
		

			Game::ExecuteCommand("Renfort_VSAVR", Caller);
	}
};

object TentativeSuicideCS: CommandScript
{
	TentativeSuicideCS()
	{
		SetIcon("missionTS");
		SetCursor("TS");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;
	
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_SUICIDE);
		Audio::PlaySample3D(SND_TENTATIVEDESUICIDE, Caller->GetPosition());	
		


		Game::ExecuteCommand("Renfort_PSE3", Caller);
		Game::ExecuteCommand("Renfort_EPAAtego", Caller);
		Game::ExecuteCommand("Renfort_PSR", Caller);
		Game::ExecuteCommand("Renfort_VIMP", Caller);
		Game::ExecuteCommand("Renfort_VAG", Caller);
		Game::ExecuteCommand("Renfort_PN308", Caller);
	}
};

object GroupeInterventionFeuForetCS : CommandScript
{
	GroupeInterventionFeuForetCS()
	{
		SetIcon("missionGIFF");
		SetCursor("GIFF");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_GIFF);	
		Audio::PlaySample3D(SND_GIFF, Caller->GetPosition());
		
		Game::ExecuteCommand("Renfort_CCR", Caller);
		Game::ExecuteCommand("Renfort_CCR", Caller);
		Game::ExecuteCommand("Renfort_CCR", Caller);
		Game::ExecuteCommand("Renfort_CCR", Caller);
		Game::ExecuteCommand("Renfort_SPVLKangoo", Caller);
	}
};

/*object NRBCCS : CommandScript
{
	NRBCCS()
	{
		SetIcon("missionNRBC");
		SetCursor("NRBC");
		SetValidTargets(ACTOR_FLOOR | ACTOR_VIRTUAL);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int ChildID)
	{
		Mission::PlayHint(HINT_NRBC);	
		Audio::PlaySample3D(SND_NRBC, Caller->GetPosition());
		
		Game::ExecuteCommand("Renfort_CICCIB", Caller);
		Game::ExecuteCommand("Renfort_CICCIB", Caller);
		//Game::ExecuteCommand("Renfort_VDIP", Caller);
		//Game::ExecuteCommand("Renfort_VANRBC", Caller);
		//Game::ExecuteCommand("Renfort_BUMD", Caller);
		Game::ExecuteCommand("Renfort_SPVLKangoo", Caller);
	}
};*/
