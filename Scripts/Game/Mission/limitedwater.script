////////////// LIMITED WATER SUPPLY TEST MOD - MISSIONSCRIPT - BY HOPPAH //////////////

const char PROTO_WATER_TANKER[]		= "mod:Prototypes/Vehicles/02 Fire Department/water_tanker.e4p";

int MAX_WATER_ENGINE01 		= 3000;
int MAX_WATER_ENGINE02 		= 3000;
int MAX_WATER_TANKER		= 10000;

int OUTTAKE_HOSE 			= 8;	//outtake per half second
int OUTTAKE_TLF_CANNON 		= 20;
int OUTTAKE_LPF_CANNON 		= 40;
int OUTTAKE_DLK_CANNON 		= 20;

int INTAKE_SUPPLYLINE 		= 50;
int OUTTAKE_WATERCANNON		= 50;

char Level[12];
int WaterLevel;
int Engine01Level, Engine02Level, TankerLevel;

object Mission01 : MissionScript
{
	GameDialog mWaterSupply;	 bool showWaterSupply;
	
	Vehicle mEngine01, mEngine02, mTanker;
	bool Engine01Empty = false;
	bool Engine02Empty = false;
	bool TankerEmpty = false;
	
	Mission01()
	{

	}

	~Mission01()
	{
	}

	void Start()
	{
		GameObjectList l1 = Game::GetGameObjects();
		for(int i = 0; i < l1.GetNumObjects(); i++)
		{
			GameObject *obj = l1.GetObject(i);
			if (obj->HasName("engine01"))
			{
				mEngine01 = Vehicle(obj);		
				Engine01Level = MAX_WATER_ENGINE01;	
				mEngine01.SetSpeed(11.f);
				mEngine01.SetObjectPath("path1", mEngine01.GetSpeed());
				Game::ExecuteCommand("VcmdSiren", &mEngine01, &mEngine01);
			}				
			if (obj->HasName("engine02"))
			{
				mEngine02 = Vehicle(obj);		
				Engine02Level = MAX_WATER_ENGINE02;	
				mEngine02.SetSpeed(11.f);	
				mEngine02.SetObjectPath("path2", mEngine02.GetSpeed());
				Game::ExecuteCommand("VcmdSiren", &mEngine02, &mEngine02);				
			}
			if (obj->HasName("water_tanker"))
			{
				mTanker = Vehicle(obj);		
				TankerLevel = MAX_WATER_TANKER;	
				mTanker.SetSpeed(11.f);	
				mTanker.SetObjectPath("path3", mTanker.GetSpeed());
				Game::ExecuteCommand("VcmdSiren", &mTanker, &mTanker);				
			}			
		}
		PersonList w1l("firefighter1");		
		for(int i = 0; i < w1l.GetNumPersons(); i++)
		{
			if (w1l.GetPerson(i)->GetEnteredCarID() == -1 && mEngine01.GetFreePassengers() > 0)
				mEngine01.AddPassenger(w1l.GetPerson(i));
		}		
		PersonList w2l("firefighter2");		
		for(int i = 0; i < w2l.GetNumPersons(); i++)
		{
			if (w2l.GetPerson(i)->GetEnteredCarID() == -1 && mEngine02.GetFreePassengers() > 0)
				mEngine02.AddPassenger(w2l.GetPerson(i));
		}			
		PersonList w3l("firefighter3");		
		for(int i = 0; i < w3l.GetNumPersons(); i++)
		{
			if (w3l.GetPerson(i)->GetEnteredCarID() == -1 && mTanker.GetFreePassengers() > 0)
				mTanker.AddPassenger(w3l.GetPerson(i));
		}		
		mWaterSupply.Load("mod:/UI/Game/WaterSupply/watersupply.xml");	showWaterSupply = false;
		Mission::StartSingleTimer("start", 0.1f);
		Mission::StartIntervalTimer("watersupply", 0.5f);
	}

	void OnLoadDialog(GameDialog *Dia, const char *NameDialog, bool show)
	{
		Dia->Show(NameDialog, show);
	}

	void OnTimer(const char *TimerName, float TimeInSec)
	{
		switch(TimerName)
		{
			case "start" :
				{
					mWaterSupply.Show(showWaterSupply);
				}
			break;
			case "watersupply" :
				{
					GameObjectList selected = Game::GetSelectedGameObjects();
					if (selected.GetNumObjects() == 1 && selected.GetObject(0)->GetType() == ACTOR_VEHICLE)
					{
						Vehicle v(selected.GetObject(0));
						if (!v.HasCommand("DummyLimitedWater") && (v.GetVehicleType() == VT_FIREFIGHTERS_GTF || v.GetVehicleType() == VT_FIREFIGHTERS_TLF || v.GetVehicleType() == VT_FIREFIGHTERS_LPF))
						{
							v.AssignCommand("DummyLimitedWater");
							if (v.HasNamePrefix("engine01") && !mEngine01.IsValid())
							{
								mEngine01 = v;
								System::Log("WATER, Assigned vehicle to mEngine01");
								FireTruck01Level = MAX_WATER_ENGINE01;
							}
							else if (v.HasNamePrefix("engine02") && !mEngine02.IsValid())
							{
								mEngine02 = v;
								System::Log("WATER, Assigned vehicle to mEngine02");
								FireTruck02Level = MAX_WATER_ENGINE02;
							}
							else if (v.HasNamePrefix("water_tanker") && !mTanker.IsValid())
							{
								mTanker = v;
								System::Log("WATER, Assigned vehicle to mTanker");
								TankerLevel = MAX_WATER_TANKER;
							}							
						}
						if (v.IsValid() && v.HasCommand("DummyLimitedWater") && !v.IsSmoking() && !v.IsDestroyed())
						{
							showWaterSupply = true; 
							OnLoadDialog(&mWaterSupply, "WaterSupplyDialog", showWaterSupply);
						} else
						{
							showWaterSupply = false; 
							OnLoadDialog(&mWaterSupply, "WaterSupplyDialog", showWaterSupply);
						}
					}
					else if (showWaterSupply)
					{
						showWaterSupply = false; 
						OnLoadDialog(&mWaterSupply, "WaterSupplyDialog", showWaterSupply);
					}
					VehicleList fflist(VT_FIREFIGHTERS_ASF, VT_FIREFIGHTERS_GTF);
					for(int i = 0; i < fflist.GetNumVehicles(); i++)
					{	
						if (fflist.GetVehicle(i)->HasCommand("DummyLimitedWater"))
						{
							Vehicle v(fflist.GetVehicle(i));
							if (((v.GetID() == mEngine01.GetID() && Engine01Level < 20) || (v.GetID() == mEngine02.GetID() && Engine02Level < 20) || (v.GetID() == mTanker.GetID() && TankerLevel < 101)) && !v.HasCommand("DummyEmptyTank"))
								v.AssignCommand("DummyEmptyTank");
							else if (v.HasCommand("DummyEmptyTank") && ((v.GetID() == mEngine01.GetID() && Engine01Level > 20) || (v.GetID() == mEngine02.GetID() && Engine02Level > 20) || (v.GetID() == mTanker.GetID() && TankerLevel > 101)))
								v.RemoveCommand("DummyEmptyTank");
						
							bool PumpControllerPresent = false;	
							int numActiveHoses = 0;
							int numActiveTLFCannons = 0;
							int numActiveLPFCannons = 0;
							int numActiveDLKCannons = 0;
							int numSupplyLines = 0;
							int numWaterTankerLines = 0;
							int Outtake = 0;
							int Intake = 0;							
														
							if (v.HasCommand("VcmdPumpSwitch") && v.HasCommand("DummyPumpEnabled"))
							{
								GameObjectList l1 = v.GetObjectsInRange(500.0f, ACTOR_PERSON);
								for(int j = 0; j < l1.GetNumObjects(); j++)
								{
									if (l1.GetObject(j)->GetType() == ACTOR_PERSON)
									{								
										Person p = l1.GetObject(j);
										if (p.GetUserData() == v.GetID() && p.HasCommand("DummyPumpEnabled") && !p.IsCurrentAnimation("useextinguis") && !p.IsFlagSet(OF_HIDDEN))
										{
											p.SetUserData(0);
											p.RemoveCommand("DummyPumpEnabled");
										}
										if (!PumpControllerPresent && p.GetUserData() == v.GetID() && p.HasCommand("DummyPumpEnabled") && p.IsCurrentAnimation("useextinguis") && !p.IsFlagSet(OF_HIDDEN))
											PumpControllerPresent = true;
									}
								}
							}
							if (!PumpControllerPresent && v.HasCommand("DummyPumpEnabled"))
							{
								v.RemoveCommand("DummyPumpEnabled");
								if (!v.IsCommandEnabled("MoveTo"))
									v.EnableCommand("MoveTo", true);
								if (!v.IsCommandEnabled("GoHome"))	
									v.EnableCommand("GoHome", true);
							}
							if (v.GetVehicleType() == VT_FIREFIGHTERS_GTF && StrCompare(v.GetPrototypeFileName(), PROTO_WATER_TANKER) != 0 && v.IsInstalled())
							{
								PersonList l2(ROLE_SQUAD);
								for(int k = 0; k < l2.GetNumPersons(); k++)
								{
									if (l2.GetPerson(k)->GetEquipment() == EQUIP_FIREHOSE && l2.GetPerson(k)->GetType() == ACTOR_PERSON && l2.GetPerson(k)->GetFirehoseID() != 0 && !l2.GetPerson(k)->IsFlagSet(OF_HIDDEN))
									{
										GameObject Phydrant = l2.GetPerson(k)->GetHydrant();
										if (Phydrant.GetID() == v.GetID() || ((Phydrant.HasName("extend_wye") || Phydrant.HasName("extend_hose")) && Phydrant.GetUserData() == v.GetID()))
										{
											Person p(l2.GetPerson(k));
											if ((!PumpControllerPresent || v.HasCommand("DummyEmptyTank")) && (p.IsCommandEnabled("Extinguish") || p.IsCurrentAction("EActionExtinguish") || p.IsCurrentAction("EActionCool")))
											{												
												p.EnableCommand("Extinguish", false);
												p.EnableCommand("Cool", false);
												p.EnableAutoTarget(false);
												if (p.IsCurrentAction("EActionExtinguish") || p.IsCurrentAction("EActionCool"))
												{
													p.ClearActions();
													p.PushActionSwitchAnim(ACTION_NEWLIST, "idleequipped");
													p.PushActionWait(ACTION_APPEND, 5.f);
												}
											}
											else if (PumpControllerPresent && !v.HasCommand("DummyEmptyTank") && !p.IsCommandEnabled("Extinguish"))
											{													
												p.EnableCommand("Extinguish", true);
												p.EnableCommand("Cool", true);
												p.EnableAutoTarget(true);
											}
											if (p.IsCurrentAction("EActionExtinguish") || p.IsCurrentAction("EActionCool"))
												numActiveHoses++;
										}
									}
								}
							}							
							if (v.GetVehicleType() == VT_FIREFIGHTERS_GTF && v.HasCommand("VcmdCannonSwitch") && v.IsCurrentAnimation("activate"))
							{
								GameObjectList l3 = Game::GetGameObjectsWithPrefix("engine_water_cannon");
								for(int h = 0; h < l3.GetNumObjects(); h++)
								{
									Vehicle cannon = l3.GetObject(h);
									if (cannon.GetUserData() == v.GetID())
									{
										if (v.HasCommand("DummyEmptyTank"))
										{
											cannon.EnableAutoTarget(false);
											cannon.ClearActions();
											cannon.PushActionWait(ACTION_NEWLIST, 4.f);
										} 
										else if (!v.HasCommand("DummyEmptyTank"))
											cannon.EnableAutoTarget(true);
										if (cannon.IsCurrentAction("EActionExtinguish") || cannon.IsCurrentAction("EActionCool"))
											numActiveTLFCannons++;
									}
								}
							}
							if ((v.GetVehicleType() == VT_FIREFIGHTERS_TLF || v.GetVehicleType() == VT_FIREFIGHTERS_LPF))
							{
								if (v.HasCommand("DummyEmptyTank") && v.IsCommandEnabled("Extinguish"))
								{
									v.EnableCommand("Extinguish", false);
									v.EnableCommand("Cool", false);
									v.EnableAutoTarget(false);
									v.ClearActions();
									v.PushActionWait(ACTION_NEWLIST, 4.f);
								}
								else if (!v.HasCommand("DummyEmptyTank") && !v.IsCommandEnabled("Extinguish"))
								{
									v.EnableCommand("Extinguish", true);
									v.EnableCommand("Cool", true);
									v.EnableAutoTarget(true);
								}								
								if (v.GetVehicleType() == VT_FIREFIGHTERS_TLF && (v.IsCurrentAction("EActionExtinguish") || v.IsCurrentAction("EActionCool")))
									numActiveTLFCannons++;									
								if (v.GetVehicleType() == VT_FIREFIGHTERS_LPF && (v.IsCurrentAction("EActionExtinguish") || v.IsCurrentAction("EActionCool")))
									numActiveLPFCannons++;									
							}								
							if (v.HasCommand("DummyWaterSupplyOn"))
								numSupplyLines++;
							if (v.HasCommand("DummyWaterSupplyFromTankerOn") && StrCompare(v.GetPrototypeFileName(), PROTO_WATER_TANKER) == 0 && v.GetVehicleType() == VT_FIREFIGHTERS_GTF && v.IsInstalled())
							{
								PersonList l4(ROLE_SQUAD);
								for(int y = 0; y < l4.GetNumPersons(); y++)
								{
									if (l4.GetPerson(y)->GetEquipment() == EQUIP_FIREHOSE && l4.GetPerson(y)->GetFirehoseID() != 0 && l4.GetPerson(y)->IsFlagSet(OF_HIDDEN) && l4.GetPerson(y)->HasCommand("DummyWaterSupplyFromTankerOn"))
									{
										GameObject Phydrant = l4.GetPerson(y)->GetHydrant();
										if (Phydrant.GetID() == v.GetID())
										{
											Person p(l4.GetPerson(y));
											GameObjectList l5 = p.GetObjectsInRange(800.0f, ACTOR_VEHICLE);
											for(int z = 0; z < l5.GetNumObjects(); z++)
											{
												if (l5.GetObject(z)->GetType() == ACTOR_VEHICLE)
												{
													Vehicle m = l5.GetObject(z);
													if (p.GetUserData() == m.GetID())
													{
														if (!v.HasCommand("DummyEmptyTank") && ((m.GetID() == mEngine01.GetID() && Engine01Level <= MAX_WATER_ENGINE01-INTAKE_SUPPLYLINE) || (m.GetID() == mEngine02.GetID() && Engine02Level <= MAX_WATER_ENGINE02-INTAKE_SUPPLYLINE)))
															numWaterTankerLines++;
													}
												}
											}
										}
									}
								}
							}								
							if (v.HasCommand("DummyWaterSupplyFromTankerOn") && StrCompare(v.GetPrototypeFileName(), PROTO_WATER_TANKER) != 0)
							{
								GameObjectList l6 = v.GetObjectsInRange(800.0f, ACTOR_PERSON);
								for(int d = 0; d < l6.GetNumObjects(); d++)
								{
									Person n = l6.GetObject(d);
									if (n.GetUserData() == v.GetID() && n.HasCommand("DummyWaterSupplyFromTankerOn"))
									{
										GameObject Phydrant = n.GetHydrant();
										if (StrCompare(Phydrant.GetPrototypeFileName(), PROTO_WATER_TANKER) == 0)
										{
											Vehicle hy(&Phydrant);
											if (!hy.HasCommand("DummyEmptyTank") && ((v.GetID() == mEngine01.GetID() && Engine01Level < MAX_WATER_ENGINE01-INTAKE_SUPPLYLINE) || (v.GetID() == mEngine02.GetID() && Engine02Level < MAX_WATER_ENGINE02-INTAKE_SUPPLYLINE)))
												numSupplyLines++;
										}
									}
								}
							}
							if (v.GetVehicleType() == VT_FIREFIGHTERS_DLK && v.IsInstalled() && v.IsUplifted() && !v.IsBasketEmpty())
							{
								PersonList l7(ROLE_SQUAD);
								for(int v = 0; v < l7.GetNumPersons(); v++)
								{
									if (l7.GetPerson(v)->CanUseDLKCannon() && l7.GetPerson(v)->GetEnteredCarID() == v.GetID())		
									{
										Person p(l7.GetPerson(v));
										if (v.HasCommand("DummyEmptyTank") && p.IsCommandEnabled("Extinguish"))
										{
											if (p.IsCommandEnabled("Extinguish"))
											{
												p.EnableCommand("Extinguish", false);
												p.EnableCommand("Cool", false);
												p.EnableAutoTarget(false);
												p.ClearActions();
												p.PushActionWait(ACTION_NEWLIST, 4.f);
											} 
										}
										else if (!v.HasCommand("DummyEmptyTank") && !p.IsCommandEnabled("Extinguish"))
										{
											p.EnableCommand("Extinguish", true);
											p.EnableCommand("Cool", true);
											p.EnableAutoTarget(true);
										}
									}
								}
								if (v.IsCannonInUse())
									numActiveDLKCannons++;							
							}
							Intake = numSupplyLines*INTAKE_SUPPLYLINE;
							Outtake = numActiveHoses*OUTTAKE_HOSE+numActiveTLFCannons*OUTTAKE_TLF_CANNON+numActiveLPFCannons*OUTTAKE_LPF_CANNON+numActiveDLKCannons*OUTTAKE_DLK_CANNON+numWaterTankerLines*OUTTAKE_WATERCANNON;	
							if (v.GetID() == mEngine01.GetID())
							{
								Engine01Level = Engine01Level+Intake-Outtake;
								if (Engine01Level < 20)
									v.AssignCommand("DummyEmptyTank");
								if (Engine01Level > MAX_WATER_ENGINE01)
									Engine01Level = MAX_WATER_ENGINE01;
								else if (Engine01Level < 0)
									Engine01Level = 0;
							}
							if (v.GetID() == mEngine02.GetID())
							{
								Engine02Level = Engine02Level+Intake-Outtake;
								if (Engine02Level < 20)
									v.AssignCommand("DummyEmptyTank");
								if (Engine02Level > MAX_WATER_ENGINE02)
									Engine02Level = MAX_WATER_ENGINE02;
								else if (Engine02Level < 0)
									Engine02Level = 0;
							}
							if (v.GetID() == mTanker.GetID())
							{
								TankerLevel = TankerLevel+Intake-Outtake;
								if (TankerLevel < 101)
									v.AssignCommand("DummyEmptyTank");
								if (TankerLevel > MAX_WATER_TANKER)
									TankerLevel = MAX_WATER_TANKER;
								else if (TankerLevel < 0)
									TankerLevel = 0;
							}					
							if (v.HasCommand("DummyEmptyTank"))
							{
								if (v.GetID() == mEngine01.GetID() && !Engine01Empty)
								{
									Engine01Empty = true;
									Game::ShowHelpTextWindow("Water tank of fire engine is empty!", 2.f);
								}
								if (v.GetID() == mEngine02.GetID() && !Engine02Empty)
								{
									Engine02Empty = true;
									Game::ShowHelpTextWindow("Water tank of fire engine is empty!", 2.f);
								}
								if (v.GetID() == mTanker.GetID() && !TankerEmpty)
								{
									TankerEmpty = true;
									Game::ShowHelpTextWindow("Water tank of water tanker is empty!", 2.f);
								}							
								if ((v.GetID() == mEngine01.GetID() && Engine01Level > 20) || (v.GetID() == mEngine02.GetID() && Engine02Level > 20) || (v.GetID() == mTanker.GetID() && TankerLevel > 101))
								{
									v.RemoveCommand("DummyEmptyTank");
									if (v.HasCommand("Extinguish"))
										v.EnableCommand("Extinguish", true);
									if (v.HasCommand("Cool"))
										v.EnableCommand("Cool", true);
									if (v.GetID() == mEngine01.GetID() && Engine01Empty)
										Engine01Empty = false;
									if (v.GetID() == mEngine02.GetID() && Engine02Empty)
										Engine02Empty = false;
									if (v.GetID() == mTanker.GetID() && TankerEmpty)
										TankerEmpty = false;										
								} else
								{
									if (v.HasCommand("Extinguish"))
										v.EnableCommand("Extinguish", false);
									if (v.HasCommand("Cool"))
										v.EnableCommand("Cool", false);
								}
							}
						}
					}
					if (showWaterSupply && selected.GetNumObjects() == 1 && selected.GetObject(0)->HasCommand("DummyLimitedWater"))
					{
						int WaterLevel = 0;
						int MaxWaterLevel = 0;
						if (mEngine01.IsSelected())
						{
							WaterLevel = Engine01Level;
							MaxWaterLevel = MAX_WATER_ENGINE01;
						}
						else if (mEngine02.IsSelected())
						{
							WaterLevel = Engine02Level;
							MaxWaterLevel = MAX_WATER_ENGINE02;
						}
						else if (mTanker.IsSelected())
						{
							WaterLevel = TankerLevel;
							MaxWaterLevel = MAX_WATER_TANKER;
						}						
						snprintf(Level, 12, "%d", WaterLevel);
						mWaterSupply.StaticText_SetText("tank", Level);
						
						if (WaterLevel > 0.9f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", true);
							OnLoadDialog(&mWaterSupply, "Level90", true);
							OnLoadDialog(&mWaterSupply, "Level80", true);
							OnLoadDialog(&mWaterSupply, "Level70", true);
							OnLoadDialog(&mWaterSupply, "Level60", true);
							OnLoadDialog(&mWaterSupply, "Level50", true);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.8f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", true);
							OnLoadDialog(&mWaterSupply, "Level80", true);
							OnLoadDialog(&mWaterSupply, "Level70", true);
							OnLoadDialog(&mWaterSupply, "Level60", true);
							OnLoadDialog(&mWaterSupply, "Level50", true);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.7f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", true);
							OnLoadDialog(&mWaterSupply, "Level70", true);
							OnLoadDialog(&mWaterSupply, "Level60", true);
							OnLoadDialog(&mWaterSupply, "Level50", true);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.6f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", true);
							OnLoadDialog(&mWaterSupply, "Level60", true);
							OnLoadDialog(&mWaterSupply, "Level50", true);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.5f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", true);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.4f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", false);
							OnLoadDialog(&mWaterSupply, "Level40", true);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.3f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", false);
							OnLoadDialog(&mWaterSupply, "Level40", false);
							OnLoadDialog(&mWaterSupply, "Level30", true);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.2f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", false);
							OnLoadDialog(&mWaterSupply, "Level40", false);
							OnLoadDialog(&mWaterSupply, "Level30", false);
							OnLoadDialog(&mWaterSupply, "Level20", true);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}
						else if (WaterLevel > 0.1f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", false);
							OnLoadDialog(&mWaterSupply, "Level40", false);
							OnLoadDialog(&mWaterSupply, "Level30", false);
							OnLoadDialog(&mWaterSupply, "Level20", false);
							OnLoadDialog(&mWaterSupply, "Level10", true);
						}		
						else if (WaterLevel < 0.1f*MaxWaterLevel)
						{
							OnLoadDialog(&mWaterSupply, "Level100", false);
							OnLoadDialog(&mWaterSupply, "Level90", false);
							OnLoadDialog(&mWaterSupply, "Level80", false);
							OnLoadDialog(&mWaterSupply, "Level70", false);
							OnLoadDialog(&mWaterSupply, "Level60", false);
							OnLoadDialog(&mWaterSupply, "Level50", false);
							OnLoadDialog(&mWaterSupply, "Level40", false);
							OnLoadDialog(&mWaterSupply, "Level30", false);
							OnLoadDialog(&mWaterSupply, "Level20", false);
							OnLoadDialog(&mWaterSupply, "Level10", false);
						}
					}
				}
			break;
		}
	}

	ActionCallbackResult OnPostAction(const char *Action, ActionCallback* Data)
	{
		switch(Action)
		{
			case "EActionUseEquipment":
				{
					if (Data->Owner->GetType() == ACTOR_PERSON)
					{
						Person p(Data->Owner);
						if (p.GetEquipment() == EQUIP_FIREHOSE && !p.IsCommandEnabled("Extinguish"))
						{
							p.EnableCommand("Extinguish", true);
							p.EnableCommand("Cool", true);
							p.EnableAutoTarget(true);
						}
					}
				}
			break;
		}
		return ACTION_CONTINUE;
	}
	
	PathFinishedAction OnPathFinished(const char *Path, GameObject *Caller)
	{
		if (Caller->GetID() == mEngine01.GetID())
		{
			mEngine01.RemoveObjectPath();
			Game::ExecuteCommand("DummyDisableSiren", &mEngine01, &mEngine01);
		}
		if (Caller->GetID() == mEngine02.GetID())
		{
			mEngine02.RemoveObjectPath();
			Game::ExecuteCommand("DummyDisableSiren", &mEngine02, &mEngine02);
		}
		if (Caller->GetID() == mTanker.GetID())
		{
			mTanker.RemoveObjectPath();
			Game::ExecuteCommand("DummyDisableSiren", &mTanker, &mTanker);
		}		
		return PATH_DEFAULT;	
	}
			
	MissionState GetMissionState()
	{
		return MISSION_RUNNING;
	}
};